{"mappings":"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","sources":["src/scripts/view.ts","src/scripts/geometry.ts","src/scripts/model.ts","src/scripts/main.ts"],"sourcesContent":["import { Point } from \"./geometry\";\nimport { Cursor, Snek, Pellet, Model } from \"./model\";\n\nexport function gameSize(uiHeight = 80): [number, number] {\n  let width: number;\n  let height: number;\n\n  const ratio = 1.5;\n  const dpr = window.devicePixelRatio;\n  const maxWidth = 600;\n\n  const dispHeight = document.documentElement.clientHeight;\n  const dispWidth = document.documentElement.clientWidth;\n\n  if (dispHeight - uiHeight < dispWidth) {\n    console.log('wider');\n    height = Math.min(maxWidth, dispHeight - uiHeight);\n    width = height * ratio;\n  } else {\n    width = Math.min(maxWidth, dispWidth);\n    height = width * ratio;\n  }\n\n  return [width, height];\n}\n\nexport class Canvas {\n  height: number;\n  width: number;\n  element: HTMLCanvasElement;\n  context: CanvasRenderingContext2D;\n\n  constructor(id: string, width: number, height: number) {\n    this.element = document.getElementById(id) as HTMLCanvasElement;\n    this.setSize(width, height);\n  }\n\n  setSize(width: number, height: number) {\n    this.width = width;\n    this.height = height;\n\n    this.element.style.width = `${width}px`;\n    this.element.style.height = `${height}px`;\n\n    // Scale for high resolution displays\n    const dpr = window.devicePixelRatio;\n    this.element.width = Math.floor(width * dpr);\n    this.element.height = Math.floor(height * dpr);\n\n    // scale the output\n    this.context = this.element.getContext(\"2d\") as CanvasRenderingContext2D;\n    this.context.scale(dpr, dpr);\n  }\n}\n\nabstract class Component {\n  protected parent!: Component | null;\n\n  public setParent(parent: Component | null) {\n    this.parent = parent;\n  }\n\n  public getParent(): Component | null {\n    return this.parent;\n  }\n\n  public abstract render(): void;\n}\n\nexport class Composite extends Component {\n  protected children: Component[] = [];\n\n  public add(component: Component) {\n    this.children.push(component);\n    component.setParent(this);\n  }\n\n  public remove(component: Component) {\n    const ix = this.children.indexOf(component);\n    this.children.splice(ix, 1);\n\n    component.setParent(null);\n  }\n\n  public render() {\n    for (const child of this.children) {\n      child.render();\n    }\n  }\n}\n\nabstract class GraphicsComponent<Type> extends Component {\n  public data: Type;\n  public target: CanvasRenderingContext2D | HTMLElement;\n\n  constructor(data: Type, context: CanvasRenderingContext2D | HTMLElement) {\n    super();\n    this.data = data;\n    this.target = context;\n  }\n}\n\nexport class CursorGraphics extends GraphicsComponent<Cursor> {\n  target: CanvasRenderingContext2D;\n\n  constructor(data: Cursor, target: CanvasRenderingContext2D) {\n    super(data, target);\n  }\n\n  render() {\n    if (this.data.path.length !== 0) {\n      this.target.strokeStyle = \"red\";\n      this.target.lineWidth = 1;\n      this.target.beginPath();\n      this.target.moveTo(this.data.path[0].x, this.data.path[0].y);\n      this.data.path.forEach((point: Point) => {\n        this.target.lineTo(point.x, point.y);\n      });\n      this.target.stroke();\n    }\n  }\n}\n\nexport class SnekGraphics extends GraphicsComponent<Snek> {\n  target: CanvasRenderingContext2D;\n\n  constructor(data: Snek, target: CanvasRenderingContext2D) {\n    super(data, target);\n  }\n\n  render() {\n    this.target.strokeStyle = \"green\";\n    this.target.lineCap = \"round\";\n    this.target.lineJoin = \"round\";\n    this.target.lineWidth = this.data.snekWidth;\n    this.target.beginPath();\n    this.target.moveTo(this.data.path[0].x, this.data.path[0].y);\n    this.data.path.forEach((point: Point) => {\n      this.target.lineTo(point.x, point.y);\n    });\n    this.target.stroke();\n  }\n}\n\nexport class PelletGraphics extends GraphicsComponent<Pellet> {\n  target: CanvasRenderingContext2D;\n\n  constructor(data: Pellet, target: CanvasRenderingContext2D) {\n    super(data, target);\n  }\n\n  render() {\n    if (this.data.loc) {\n      this.target.fillStyle = \"blue\";\n      this.target.beginPath();\n      this.target.arc(\n        this.data.loc.x,\n        this.data.loc.y,\n        this.data.r,\n        0,\n        Math.PI * 2\n      );\n      this.target.fill();\n    }\n  }\n}\n\nexport class CurrentScore extends GraphicsComponent<Model> {\n  target: HTMLElement;\n\n  constructor(data: Model, target: HTMLElement) {\n    super(data, target);\n  }\n\n  render() {\n    let display = `Score: ${String(this.data.score).padStart(2, \"\\xa0\")}`;\n    this.target.innerText = display;\n  }\n}\n\nexport class BestScore extends GraphicsComponent<Model> {\n  target: HTMLElement;\n\n  constructor(data: Model, target: HTMLElement) {\n    super(data, target);\n  }\n\n  render() {\n    let display = `Best: ${String(this.data.bestScore).padStart(2, \"\\xa0\")}`;\n    this.target.innerText = display;\n  }\n}\n\nexport class SpeedGraphics extends GraphicsComponent<Cursor> {\n  target: CanvasRenderingContext2D;\n\n  constructor(data: Cursor, target: CanvasRenderingContext2D) {\n    super(data, target);\n  }\n\n  render() {\n    const padding = 10;\n    const meterStart = {\n      x: padding,\n      y: padding,\n    };\n    const meterSize = {\n      x: this.target.canvas.clientWidth - meterStart.x,\n      y: this.target.canvas.clientHeight - padding * 2,\n    };\n\n    // Speedometer background\n    this.target.fillStyle = \"#eee\";\n    this.target.fillRect(meterStart.x, meterStart.y, meterSize.x, meterSize.y);\n\n    // Speed limit\n    this.target.fillStyle = \"orangeRed\";\n    this.target.fillRect(\n      meterStart.x,\n      meterStart.y,\n      (meterSize.x * this.data.speedLimit) / this.data.maxSpeed,\n      meterSize.y\n    );\n\n    // Speedometer needle\n    const speed = Math.min(this.data.smoothSpeed, this.data.maxSpeed);\n    this.target.fillStyle = \"green\";\n    this.target.beginPath();\n    this.target.moveTo(\n      (meterSize.x * speed) / this.data.maxSpeed - 5 + meterStart.x,\n      meterStart.y + meterSize.y\n    );\n    this.target.lineTo(\n      (meterSize.x * speed) / this.data.maxSpeed + 5 + meterStart.x,\n      meterStart.y + meterSize.y\n    );\n    this.target.lineTo(\n      (meterSize.x * speed) / this.data.maxSpeed + 1 + meterStart.x,\n      meterStart.y + 10\n    );\n    this.target.lineTo(\n      (meterSize.x * speed) / this.data.maxSpeed - 1 + meterStart.x,\n      meterStart.y + 10\n    );\n    this.target.fill();\n  }\n}\n","export interface Point {\n  x: number;\n  y: number;\n}\nexport interface Arc {\n  center: Point;\n  radius: number;\n}\nexport type Path = Point[];\n\nexport function dist(p1: Point, p2: Point): number {\n  return Math.sqrt((p1.x - p2.x) ** 2 + (p1.y - p2.y) ** 2);\n}\n\n// Return intersection point if lines intersect, false if no intersection.\nexport function intersection(seg1: Path, arc: Arc): Point | false;\nexport function intersection(seg1: Path, seg2: Path): Point | false;\nexport function intersection(seg1: Path, seg2: Arc | Path): Point | false {\n  if (\"center\" in seg2) {\n    const [{ x: x1, y: y1 }, { x: x2, y: y2 }] = seg1;\n    const {\n      center: { x: xc, y: yc },\n      radius,\n    } = seg2;\n\n    const a = (x1 - x2) ** 2 + (y1 - y2) ** 2;\n    const b = (x1 - x2) * (x2 - xc) + (y1 - y2) * (y2 - yc);\n    const c = (x2 - xc) ** 2 + (y2 - yc) ** 2 - radius ** 2;\n\n    const discriminant = b ** 2 - a * c;\n    if (discriminant < 0) {\n      return false;\n    }\n\n    let t: number;\n    t = (-b - Math.sqrt(discriminant)) / a;\n\n    if (!(0 <= t && t <= 1)) {\n      // getting the other intersection\n      t = (-b + Math.sqrt(discriminant)) / a;\n    }\n    if (!(0 <= t && t <= 1)) {\n      // t still out of range? then no intersection.\n      return false;\n    }\n\n    return {\n      x: t * x1 + (1 - t) * x2,\n      y: t * y1 + (1 - t) * y2,\n    };\n  } else {\n    const [{ x: x1, y: y1 }, { x: x2, y: y2 }] = seg1;\n    const [{ x: x3, y: y3 }, { x: x4, y: y4 }] = seg2;\n\n    const t =\n      ((x1 - x3) * (y3 - y4) - (y1 - y3) * (x3 - x4)) /\n      ((x1 - x2) * (y3 - y4) - (y1 - y2) * (x3 - x4));\n    if (!(0 <= t && t <= 1)) {\n      return false;\n    }\n\n    const u =\n      ((x1 - x3) * (y1 - y2) - (y1 - y3) * (x1 - x2)) /\n      ((x1 - x2) * (y3 - y4) - (y1 - y2) * (x3 - x4));\n    if (!(0 <= u && u <= 1)) {\n      return false;\n    }\n\n    return {\n      x: x1 + t * (x2 - x1),\n      y: y1 + t * (y2 - y1),\n    };\n  }\n}\n","import { dist, intersection, Path, Point } from \"./geometry\";\n\nfunction randomBetween(min: number, max: number) {\n  return Math.random() * (max - min) + min;\n}\n\ntype Notification =\n  | [\"pointermove\", Cursor]\n  | [\"trimpath\", Snek, number]\n  | [\"eatpellet\", Cursor]\n  | [\"hitself\", Cursor]\n  | [\"hitwall\", Cursor]\n  | [\"tooslow\", Cursor];\n\ninterface Mediator {\n  notify(notification: Notification): void;\n}\n\n// events are sent here, and the mediator passes them on to the correct handler.\nexport class Model implements Mediator {\n  public score: number;\n  public bestScore: number;\n\n  private cursor: Cursor;\n  private snek: Snek;\n  private pellet: Pellet;\n\n  constructor(cursor: Cursor, snek: Snek, pellet: Pellet) {\n    this.score = 0;\n    const bestScore = localStorage.getItem(\"bestScore\");\n    this.bestScore = bestScore ? Number(bestScore) : 0;\n\n    this.cursor = cursor;\n    this.cursor.setMediator(this);\n    this.snek = snek;\n    this.snek.setMediator(this);\n    this.pellet = pellet;\n    this.pellet.setMediator(this);\n  }\n\n  public notify(notification: Notification): void {\n    const [event, sender] = notification;\n\n    switch (event) {\n      case \"pointermove\":\n        this.snek.update(sender);\n        this.cursor.updateSpeed();\n        this.cursor.checkCollision(this.snek, this.pellet);\n        break;\n\n      case \"trimpath\":\n        // Only keep enough raw path data to add another snek segment\n        const [, , ix] = notification;\n        this.cursor.trim(ix);\n        break;\n\n      case \"eatpellet\":\n        console.log(\"nom!\");\n        this.snek.grow();\n        this.increaseScore();\n        this.cursor.increaseSpeed();\n        this.pellet.place(this.snek.path);\n        break;\n\n      case \"hitself\":\n        console.log(\"ouch!\");\n        this.gameOver(...notification);\n        break;\n\n      case \"hitwall\":\n        console.log(\"whoops!\");\n        this.gameOver(...notification);\n        break;\n\n      case \"tooslow\":\n        console.log(\"faster!\");\n        this.gameOver(...notification);\n        break;\n\n      default:\n        const _exhaustiveCheck: never = sender;\n        return _exhaustiveCheck;\n    }\n  }\n\n  increaseScore() {\n    this.score += 1;\n    this.bestScore = Math.max(this.bestScore, this.score);\n  }\n\n  gameOver(reason: Notification[0], cursor: Cursor) {\n    const message = {\n      hitself: \"You crashed into yourself!\",\n      hitwall: \"You crashed into a wall!\",\n      tooslow: \"You were too slow!\",\n    };\n\n    localStorage.setItem(\"bestScore\", String(this.bestScore));\n\n    if (process.env.NODE_ENV === \"production\") {\n      document.removeEventListener(\"pointermove\", cursor.moveHandler);\n      alert(`Game Over!\\n${message[reason]}\\nYour score: ${this.score}`);\n      location.reload();\n    }\n  }\n}\n\n// Components contain some sort of logic and can reference their mediators\n// Things in the game that have data that need updating.\nabstract class Component {\n  protected mediator: Mediator;\n\n  constructor(mediator?: Mediator) {\n    this.mediator = mediator!;\n  }\n\n  public setMediator(mediator: Mediator): void {\n    this.mediator = mediator;\n  }\n}\n\nexport class Cursor extends Component {\n  target: HTMLCanvasElement;\n  path: Path;\n  timeStamp: number[];\n  speed: number;\n  smoothSpeed: number;\n  speedLimit: number;\n  speedIncrease: number;\n  maxSpeed: number;\n\n  constructor(target: HTMLCanvasElement) {\n    super();\n    this.target = target;\n    this.path = [];\n    this.timeStamp = [];\n    this.speed = 0;\n    this.smoothSpeed = 0;\n    this.speedLimit = 0;\n    this.speedIncrease = 0.05;\n    this.maxSpeed = 5;\n    this.moveHandler = this.moveHandler.bind(this);\n  }\n\n  public moveHandler(e: PointerEvent) {\n    const point = {\n      x: e.x - this.target.offsetLeft,\n      y: e.y - this.target.offsetTop,\n    };\n\n    this.path.unshift(point);\n    this.timeStamp.unshift(e.timeStamp);\n    this.mediator.notify([\"pointermove\", this]);\n  }\n\n  public trim(ix: number) {\n    this.path.splice(ix);\n    this.timeStamp.splice(ix);\n  }\n\n  public getSpeed(window = 6) {\n    window = Math.min(window, this.path.length - 1);\n    if (window < 2) {\n      return 0;\n    }\n\n    let travelled = 0;\n    let time = 0;\n    for (let i = 0; i < window; i++) {\n      travelled += dist(this.path[i], this.path[i + 1]);\n      time += this.timeStamp[i] - this.timeStamp[i + 1];\n    }\n\n    return travelled / time;\n  }\n\n  public updateSpeed() {\n    const alpha = 0.1;\n    this.speed = this.getSpeed();\n    if (this.speed !== NaN) {\n      this.smoothSpeed = alpha * this.speed + (1 - alpha) * this.smoothSpeed;\n    }\n\n    if (this.smoothSpeed < this.speedLimit) {\n      this.mediator.notify([\"tooslow\", this]);\n    }\n  }\n\n  public increaseSpeed() {\n    this.speedLimit = Math.min(\n      this.speedLimit + this.speedIncrease,\n      this.maxSpeed\n    );\n  }\n\n  public checkCollision(snek: Snek, pellet: Pellet) {\n    // snek vs pellet collisions\n    if (pellet.loc) {\n      if (\n        2 <= this.path.length &&\n        intersection([this.path[0], this.path[1]], {\n          center: pellet.loc,\n          radius: pellet.r + snek.snekWidth / 2,\n        })\n      ) {\n        this.mediator.notify([\"eatpellet\", this]);\n      }\n    }\n\n    // // snek vs wall collisions\n    if (\n      this.path[0].x - 1 <= 0 ||\n      this.target.clientWidth - 1 <= this.path[0].x ||\n      this.path[0].y - 1 <= 0 ||\n      this.target.clientHeight - 1 <= this.path[0].y\n    ) {\n      this.mediator.notify([\"hitwall\", this]);\n    }\n\n    // snek vs snek collisions\n    for (let i = 2; i < snek.path.length - 1; i++) {\n      if (\n        intersection(\n          [snek.path[0], snek.path[1]],\n          [snek.path[i], snek.path[i + 1]]\n        )\n      ) {\n        this.mediator.notify([\"hitself\", this]);\n      }\n    }\n  }\n}\n\nexport class Snek extends Component {\n  segments: number;\n  segLength: number;\n  path: Path;\n  snekWidth: number;\n\n  constructor(startLoc: Point) {\n    super();\n    this.segments = 4;\n    this.segLength = 50;\n    this.snekWidth = 10;\n\n    this.path = [startLoc];\n    for (let i = 0; i < this.segments; i++) {\n      const nextSeg = {\n        x: this.path[i].x,\n        y: this.path[i].y + this.segLength,\n      };\n\n      this.path.push(nextSeg);\n    }\n  }\n\n  public update(cursor: Cursor) {\n    const cursorPath = cursor.path;\n    this.path = [cursorPath[0]];\n    let segHead = this.path[this.path.length - 1];\n    for (let [ix, p] of cursorPath.entries()) {\n      if (this.path.length <= this.segments) {\n        while (this.segLength < dist(segHead, p)) {\n          const seg = [cursorPath[ix - 1], p];\n          const arc = {\n            center: segHead,\n            radius: this.segLength,\n          };\n          segHead = intersection(seg, arc) as Point;\n          this.path.push(segHead);\n          if (this.segments < this.path.length) {\n            break;\n          }\n        }\n      } else {\n        if (this.segLength * 2 <= dist(segHead, p)) {\n          this.mediator.notify([\"trimpath\", this, ix]);\n          break;\n        }\n      }\n    }\n  }\n\n  public grow() {\n    this.segments += 1;\n  }\n}\n\nexport class Pellet extends Component {\n  target: HTMLCanvasElement;\n  loc: Point | null;\n  r: number;\n\n  constructor(target: HTMLCanvasElement, noGo: Path) {\n    super();\n\n    this.r = 15;\n    this.target = target;\n    this.place(noGo);\n  }\n\n  // Choose random point within target until\n  // no walls or snek within buffer range\n  place(noGo: Path, buffer = 30) {\n    if (noGo !== undefined) {\n      noGo = noGo;\n    }\n\n    let loc: Point;\n    let locValid: boolean;\n\n    while (true) {\n      locValid = true;\n      loc = {\n        x: randomBetween(buffer, this.target.clientWidth - buffer),\n        y: randomBetween(buffer, this.target.clientHeight - buffer),\n      };\n\n      // loc is fine if there is no noGo\n      if (noGo.length === 0) {\n        this.loc = loc;\n        break;\n      }\n\n      // Check if loc within buffer distance of noGo path.\n      for (let i = 0; i < noGo.length - 1; i++) {\n        if (\n          intersection([noGo[i], noGo[i + 1]], {\n            center: loc,\n            radius: this.r + buffer,\n          })\n        ) {\n          // loc is too close to noGo, try again.\n          locValid = false;\n          break;\n        }\n      }\n\n      if (locValid) {\n        this.loc = loc;\n        break;\n      }\n    }\n  }\n}\n","import {\n  BestScore,\n  Canvas,\n  Composite,\n  CurrentScore,\n  CursorGraphics,\n  gameSize,\n  PelletGraphics,\n  SnekGraphics,\n  SpeedGraphics,\n} from \"./view\";\nimport { Model, Cursor, Snek, Pellet } from \"./model\";\n\nlet model: Model;\nlet cursor: Cursor;\nlet snek: Snek;\nlet pellet: Pellet;\n\nlet graphics: Composite;\n\nconst uiHeight = 80;\nconst [width, height] = gameSize(uiHeight);\n\nconst uiCanvas = new Canvas(\"ui\", width - 200, 80);\nconst gameCanvas = new Canvas(\"game\", width, height);\n\ncursor = new Cursor(gameCanvas.element);\nsnek = new Snek({\n  x: gameCanvas.width / 2,\n  y: gameCanvas.height / 2,\n});\npellet = new Pellet(gameCanvas.element, snek.path);\nmodel = new Model(cursor, snek, pellet);\n\nconst gameGraphics = new Composite();\nif (process.env.NODE_ENV === \"development\") {\n  gameGraphics.add(new CursorGraphics(cursor, gameCanvas.context));\n}\ngameGraphics.add(new SnekGraphics(snek, gameCanvas.context));\ngameGraphics.add(new PelletGraphics(pellet, gameCanvas.context));\n\nconst uiGraphics = new Composite();\nuiGraphics.add(new SpeedGraphics(cursor, uiCanvas.context));\nuiGraphics.add(\n  new CurrentScore(\n    model,\n    document.getElementById(\"currentScore\") as HTMLElement\n  )\n);\nuiGraphics.add(\n  new BestScore(model, document.getElementById(\"bestScore\") as HTMLElement)\n);\n\ngraphics = new Composite();\ngraphics.add(gameGraphics);\ngraphics.add(uiGraphics);\n\nclass SpeedSnek {\n  constructor() {\n    this.gameLoop = this.gameLoop.bind(this);\n  }\n\n  init() {\n    window.requestAnimationFrame(this.gameLoop);\n    document.addEventListener(\"pointermove\", cursor.moveHandler);\n  }\n\n  gameLoop() {\n    this.render();\n    this.update();\n    requestAnimationFrame(this.gameLoop);\n  }\n\n  update() {}\n\n  render() {\n    gameCanvas.context.clearRect(0, 0, gameCanvas.width, gameCanvas.height);\n    uiCanvas.context.clearRect(0, 0, uiCanvas.width, uiCanvas.height);\n    graphics.render();\n  }\n}\n\nlet speedSnek = new SpeedSnek();\nspeedSnek.init();\n"],"names":["$a283a42065af9fe1$export$8d01c972ee8b14a9","constructor","id","width","height","this","element","document","getElementById","setSize","style","dpr","window","devicePixelRatio","Math","floor","context","getContext","scale","$a283a42065af9fe1$var$Component","setParent","parent","getParent","$a283a42065af9fe1$export$43586241d9db0c6d","children","add","component","push","remove","ix","indexOf","splice","render","child","$a283a42065af9fe1$var$GraphicsComponent","data","super","target","$512903f9dc58181d$export$6c4a311cc157c764","p1","p2","sqrt","x","y","$512903f9dc58181d$export$bc86dfbf7795668c","seg1","seg2","x1","y1","x2","y2","center","xc","yc","radius","a","b","discriminant","t","x11","y11","x21","y21","x3","y3","x4","y4","t1","u","$de1c67ad03edf268$var$randomBetween","min","max","random","$de1c67ad03edf268$var$Component","mediator","setMediator","$1ccc8d3c866b7484$var$model","$1ccc8d3c866b7484$var$cursor","$1ccc8d3c866b7484$var$snek","$1ccc8d3c866b7484$var$pellet","$1ccc8d3c866b7484$var$graphics","$1ccc8d3c866b7484$var$width","$1ccc8d3c866b7484$var$height","uiHeight","dispHeight","documentElement","clientHeight","dispWidth","clientWidth","console","log","$1ccc8d3c866b7484$var$uiCanvas","$1ccc8d3c866b7484$var$gameCanvas","path","timeStamp","speed","smoothSpeed","speedLimit","speedIncrease","maxSpeed","moveHandler","bind","e","point","offsetLeft","offsetTop","unshift","notify","trim","getSpeed","length","travelled","time","i","updateSpeed","increaseSpeed","checkCollision","snek","pellet","loc","r","snekWidth","startLoc","segments","segLength","nextSeg","update","cursor","cursorPath","segHead","p","entries","grow","noGo","place","buffer","locValid","score","bestScore","localStorage","getItem","Number","notification","event","sender","increaseScore","gameOver","reason","setItem","String","removeEventListener","alert","hitself","hitwall","tooslow","location","reload","$1ccc8d3c866b7484$var$gameGraphics","strokeStyle","lineCap","lineJoin","lineWidth","beginPath","moveTo","forEach","lineTo","stroke","fillStyle","arc","PI","fill","$1ccc8d3c866b7484$var$uiGraphics","meterStart","meterSize","canvas","padding","fillRect","display","padStart","innerText","gameLoop","init","requestAnimationFrame","addEventListener","clearRect"],"version":3,"file":"index.1d79b134.js.map"}