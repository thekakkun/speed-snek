{"mappings":"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","sources":["src/scripts/geometry.ts","src/scripts/model.ts","src/scripts/graphics.ts","src/scripts/speedSnek.ts","src/scripts/main.ts"],"sourcesContent":["export interface Point {\n  x: number;\n  y: number;\n}\nexport interface Arc {\n  center: Point;\n  radius: number;\n}\nexport type Path = Point[];\n\nexport function dist(p1: Point, p2: Point): number {\n  return Math.sqrt((p1.x - p2.x) ** 2 + (p1.y - p2.y) ** 2);\n}\n\n// Return intersection point if lines intersect, false if no intersection.\nexport function intersection(seg1: Path, arc: Arc): Point | false;\nexport function intersection(seg1: Path, seg2: Path): Point | false;\nexport function intersection(seg1: Path, seg2: Arc | Path): Point | false {\n  if (\"center\" in seg2) {\n    const [{ x: x1, y: y1 }, { x: x2, y: y2 }] = seg1;\n    const {\n      center: { x: xc, y: yc },\n      radius,\n    } = seg2;\n\n    const a = (x1 - x2) ** 2 + (y1 - y2) ** 2;\n    const b = (x1 - x2) * (x2 - xc) + (y1 - y2) * (y2 - yc);\n    const c = (x2 - xc) ** 2 + (y2 - yc) ** 2 - radius ** 2;\n\n    const discriminant = b ** 2 - a * c;\n    if (discriminant < 0) {\n      return false;\n    }\n\n    let t: number;\n    t = (-b - Math.sqrt(discriminant)) / a;\n\n    if (!(0 <= t && t <= 1)) {\n      // getting the other intersection\n      t = (-b + Math.sqrt(discriminant)) / a;\n    }\n    if (!(0 <= t && t <= 1)) {\n      // t still out of range? then no intersection.\n      return false;\n    }\n\n    return {\n      x: t * x1 + (1 - t) * x2,\n      y: t * y1 + (1 - t) * y2,\n    };\n  } else {\n    const [{ x: x1, y: y1 }, { x: x2, y: y2 }] = seg1;\n    const [{ x: x3, y: y3 }, { x: x4, y: y4 }] = seg2;\n\n    const t =\n      ((x1 - x3) * (y3 - y4) - (y1 - y3) * (x3 - x4)) /\n      ((x1 - x2) * (y3 - y4) - (y1 - y2) * (x3 - x4));\n    if (!(0 <= t && t <= 1)) {\n      return false;\n    }\n\n    const u =\n      ((x1 - x3) * (y1 - y2) - (y1 - y3) * (x1 - x2)) /\n      ((x1 - x2) * (y3 - y4) - (y1 - y2) * (x3 - x4));\n    if (!(0 <= u && u <= 1)) {\n      return false;\n    }\n\n    return {\n      x: x1 + t * (x2 - x1),\n      y: y1 + t * (y2 - y1),\n    };\n  }\n}\n","import { dist, intersection, Path, Point } from \"./geometry\";\nimport { Canvas } from \"./graphics\";\n\nfunction randomBetween(min: number, max: number) {\n  return Math.random() * (max - min) + min;\n}\n\nexport class Cursor {\n  canvas: Canvas;\n  path: Path;\n  timeStamp: number[];\n  rawSpeed: number;\n  lastEvent: string;\n\n  constructor(canvas: Canvas) {\n    this.canvas = canvas;\n    this.path = [];\n    this.timeStamp = [];\n    this.rawSpeed = 0;\n    this.lastEvent = \"\";\n    this.moveHandler = this.moveHandler.bind(this);\n  }\n\n  public moveHandler(e: PointerEvent | Event) {\n    if (e instanceof PointerEvent) {\n      const point = {\n        x: e.x - this.canvas.element.getBoundingClientRect().x,\n        y: e.y - this.canvas.element.getBoundingClientRect().y,\n      };\n\n      this.path.unshift(point);\n      this.timeStamp.unshift(e.timeStamp);\n    } else if (this.lastEvent === e.type && this.path.length) {\n      this.path.unshift(this.path[0]);\n      this.timeStamp.unshift(e.timeStamp);\n    }\n\n    this.lastEvent = e.type;\n  }\n\n  public trim(ix: number) {\n    this.path.splice(ix);\n    this.timeStamp.splice(ix);\n  }\n\n  public setSpeed(window = 6) {\n    window = Math.min(window, this.path.length - 1);\n    if (window < 2) {\n      this.rawSpeed = 0;\n    }\n\n    let travelled = 0;\n    let time = 0;\n    for (let i = 0; i < window; i++) {\n      travelled += dist(this.path[i], this.path[i + 1]);\n      time += this.timeStamp[i] - this.timeStamp[i + 1];\n    }\n\n    if (travelled === 0 || time === 0) {\n      this.rawSpeed = 0;\n    } else {\n      this.rawSpeed = travelled / time;\n    }\n  }\n}\n\nexport class Snek extends Cursor {\n  segments: number;\n  segLength: number;\n  segmentPath: Path;\n  snekWidth: number;\n  speed: number;\n\n  constructor(canvas: Canvas) {\n    super(canvas);\n\n    this.segments = 4;\n    this.segLength = 50;\n    this.snekWidth = 10;\n    this.speed = 0;\n    this.segmentPath = [\n      {\n        x: this.canvas.width / 2,\n        y: this.canvas.height / 2,\n      },\n    ];\n    for (let i = 0; i < this.segments; i++) {\n      const nextSeg = {\n        x: this.segmentPath[i].x,\n        y: this.segmentPath[i].y + this.segLength,\n      };\n\n      this.segmentPath.push(nextSeg);\n    }\n  }\n\n  public moveHandler(e: PointerEvent | Event) {\n    super.moveHandler(e);\n    this.calculateSegments();\n    this.setSpeed();\n  }\n\n  public calculateSegments() {\n    Object.assign(this.segmentPath, this.path, { length: 1 });\n    let segHead = this.segmentPath[this.segmentPath.length - 1];\n    for (let [ix, p] of this.path.entries()) {\n      if (this.segmentPath.length <= this.segments) {\n        while (this.segLength < dist(segHead, p)) {\n          const seg = [this.path[ix - 1], p];\n          const arc = {\n            center: segHead,\n            radius: this.segLength,\n          };\n          segHead = intersection(seg, arc) as Point;\n          this.segmentPath.push(segHead);\n          if (this.segments < this.segmentPath.length) {\n            break;\n          }\n        }\n      } else {\n        if (this.segLength * 2 <= dist(segHead, p)) {\n          super.trim(ix);\n        }\n      }\n    }\n  }\n\n  public setSpeed(window = 6) {\n    super.setSpeed(window);\n\n    const alpha = 0.05;\n    this.speed = alpha * this.rawSpeed + (1 - alpha) * this.speed;\n  }\n\n  public grow() {\n    this.segments += 1;\n  }\n}\n\nexport class Pellet {\n  target: HTMLCanvasElement;\n  loc: Point;\n  radius: number;\n\n  constructor(target: HTMLCanvasElement) {\n    this.radius = 15;\n    this.target = target;\n    this.loc = Object.create({});\n  }\n\n  // Choose random point within target until\n  // no walls or snek within buffer range\n  place(noGo: Path, buffer = 30) {\n    if (noGo !== undefined) {\n      noGo = noGo;\n    }\n\n    let loc: Point;\n    let locValid: boolean;\n\n    while (true) {\n      locValid = true;\n      loc = {\n        x: randomBetween(buffer, this.target.clientWidth - buffer),\n        y: randomBetween(buffer, this.target.clientHeight - buffer),\n      };\n\n      // loc is fine if there is no noGo\n      if (noGo.length === 0) {\n        this.loc = loc;\n        break;\n      }\n\n      // Check if loc within buffer distance of noGo path.\n      for (let i = 0; i < noGo.length - 1; i++) {\n        if (\n          intersection([noGo[i], noGo[i + 1]], {\n            center: loc,\n            radius: this.radius + buffer,\n          })\n        ) {\n          // loc is too close to noGo, try again.\n          locValid = false;\n          break;\n        }\n      }\n\n      if (locValid) {\n        Object.assign(this.loc!, loc);\n        // this.loc = loc;\n        break;\n      }\n    }\n  }\n}\n","import { Arc, Path, Point } from \"./geometry\";\nimport { SpeedSnek } from \"./speedSnek\";\n\nexport const white = \"#fdfffc\";\nexport const red = \"#ff3333\";\nexport const green = \"#94e34f\";\nexport const blue = \"#49b9e6\";\nexport const background = \"#040406\";\n\nexport function gameSize(): [number, number] {\n  let width: number;\n  let height: number;\n\n  const ratio = 1.5;\n  const maxSide = 600;\n  const borderWidth = parseInt(\n    getComputedStyle(document.getElementById(\"game\") as HTMLElement).borderWidth\n  );\n\n  const dispHeight = document.documentElement.clientHeight;\n  const dispWidth = document.documentElement.clientWidth;\n\n  const uiHeight = document.getElementById(\"ui\")?.clientHeight as number;\n\n  if ((dispHeight - uiHeight) / dispWidth < 1) {\n    height = Math.min(maxSide, dispHeight - uiHeight - borderWidth * 2);\n    width = height * ratio;\n  } else {\n    width = Math.min(maxSide, dispWidth - borderWidth * 2);\n    height = width * ratio;\n  }\n\n  return [width, height];\n}\n\nexport class Canvas {\n  height: number;\n  width: number;\n  element: HTMLCanvasElement;\n  context: CanvasRenderingContext2D;\n\n  constructor(id: string, width?: number, height?: number) {\n    this.element = document.getElementById(id) as HTMLCanvasElement;\n    this.context = this.element.getContext(\"2d\") as CanvasRenderingContext2D;\n\n    if (width === undefined) {\n      width = this.element.clientWidth;\n    }\n    if (height === undefined) {\n      height = this.element.clientHeight;\n    }\n\n    this.width = width;\n    this.height = height;\n\n    this.setSize();\n  }\n\n  setSize() {\n    this.element.style.width = `${this.width}px`;\n    this.element.style.height = `${this.height}px`;\n\n    // Scale for high resolution displays\n    this.element.width = Math.floor(this.width * devicePixelRatio);\n    this.element.height = Math.floor(this.height * devicePixelRatio);\n\n    // scale the output\n    this.context.scale(devicePixelRatio, devicePixelRatio);\n  }\n\n  clear() {\n    this.context.clearRect(0, 0, this.width, this.height);\n  }\n}\n\nabstract class Component {\n  protected parent!: Component | null;\n\n  public setParent(parent: Component | null) {\n    this.parent = parent;\n  }\n\n  public getParent(): Component | null {\n    return this.parent;\n  }\n\n  public abstract render(): void;\n}\n\nexport class Composite extends Component {\n  protected children: Component[] = [];\n\n  public add(component: Component) {\n    this.children.push(component);\n    component.setParent(this);\n  }\n\n  public remove(component: Component) {\n    const ix = this.children.indexOf(component);\n    this.children.splice(ix, 1);\n\n    component.setParent(null);\n  }\n\n  public render() {\n    for (const child of this.children) {\n      child.render();\n    }\n  }\n}\n\nabstract class GraphicsComponent<Type> extends Component {\n  public data: Type;\n  public canvas: Canvas;\n\n  constructor(data: Type, canvas: Canvas) {\n    super();\n    this.data = data;\n    this.canvas = canvas;\n  }\n}\n\nexport class CanvasLine extends GraphicsComponent<Path> {\n  color: string;\n  width: number;\n\n  constructor(data: Path, canvas: Canvas, color: string, width: number) {\n    super(data, canvas);\n    this.color = color;\n    this.width = width;\n  }\n\n  render() {\n    const path = this.data;\n    const ctx = this.canvas.context;\n\n    if (path.length !== 0) {\n      ctx.strokeStyle = this.color;\n      ctx.lineWidth = this.width;\n      ctx.lineCap = \"round\";\n      ctx.lineJoin = \"round\";\n      ctx.beginPath();\n      ctx.moveTo(path[0].x, path[0].y);\n      path.forEach((point: Point) => {\n        ctx.lineTo(point.x, point.y);\n      });\n      ctx.stroke();\n    }\n  }\n}\n\nexport class CanvasCircle extends GraphicsComponent<Arc> {\n  color: string;\n  width: number;\n\n  constructor(data: Arc, canvas: Canvas, color: string, width: number) {\n    super(data, canvas);\n    this.color = color;\n    this.width = width;\n  }\n\n  render() {\n    const ctx = this.canvas.context;\n    ctx.beginPath();\n    ctx.strokeStyle = this.color;\n    ctx.lineWidth = this.width;\n    ctx.arc(\n      this.data.center.x,\n      this.data.center.y,\n      this.data.radius,\n      0,\n      Math.PI * 2\n    );\n    ctx.stroke();\n  }\n}\n\nexport class CanvasDisc extends GraphicsComponent<Arc> {\n  color: string;\n\n  constructor(data: Arc, canvas: Canvas, color: string) {\n    super(data, canvas);\n    this.color = color;\n  }\n\n  render() {\n    if (this.data.center) {\n      const ctx = this.canvas.context;\n      ctx.fillStyle = this.color;\n      ctx.beginPath();\n      ctx.arc(\n        this.data.center.x,\n        this.data.center.y,\n        this.data.radius,\n        0,\n        Math.PI * 2\n      );\n      ctx.fill();\n    }\n  }\n}\n\nexport class CanvasRect extends GraphicsComponent<[Point, Point]> {\n  color: string;\n\n  constructor(data: [Point, Point], canvas: Canvas, color: string) {\n    super(data, canvas);\n    this.color = color;\n  }\n\n  render() {\n    const rectStart = this.data[0];\n    const rectSize = {\n      x: this.data[1].x - rectStart.x,\n      y: this.data[1].y - rectStart.y,\n    };\n    const ctx = this.canvas.context;\n\n    ctx.fillStyle = this.color;\n    ctx.fillRect(rectStart.x, rectStart.y, rectSize.x, rectSize.y);\n  }\n}\n\nexport class SpeedGraphics extends GraphicsComponent<SpeedSnek> {\n  constructor(data: SpeedSnek, canvas: Canvas) {\n    super(data, canvas);\n  }\n\n  render() {\n    const barWidth = 5;\n    const margin = 3;\n    const border = parseInt(getComputedStyle(this.canvas.element).borderWidth);\n    const bars = Math.floor(\n      (this.canvas.width - border) / (barWidth + margin)\n    );\n\n    const speedLimitPercent = this.data.speedLimit / this.data.maxSpeed;\n    const speedPercent = this.data.snek.speed / this.data.maxSpeed;\n\n    const ctx = this.canvas.context;\n    let color: typeof red | typeof white | typeof background;\n\n    for (let i = 0; i <= bars; i++) {\n      if (\n        (border + (barWidth + margin) * i - margin) /\n          (this.canvas.width - border * 2) <\n        speedLimitPercent\n      ) {\n        color = red;\n      } else if (\n        (border + (barWidth + margin) * i - margin) /\n          (this.canvas.width - border * 2) <\n        speedPercent\n      ) {\n        color = white;\n      } else {\n        color = background;\n      }\n\n      ctx.strokeStyle = color;\n      ctx.lineWidth = barWidth;\n      ctx.lineCap = \"round\";\n      ctx.lineJoin = \"round\";\n      ctx.beginPath();\n      ctx.moveTo((barWidth + margin) * i + barWidth / 2, margin);\n      ctx.lineTo(\n        (barWidth + margin) * i + barWidth / 2,\n        this.canvas.height - margin\n      );\n      ctx.stroke();\n    }\n  }\n}\n","import { Arc, dist, intersection } from \"./geometry\";\nimport { Pellet, Snek } from \"./model\";\nimport {\n  blue,\n  Canvas,\n  CanvasCircle,\n  CanvasDisc,\n  CanvasLine,\n  Composite,\n  SpeedGraphics,\n  gameSize,\n  green,\n  red,\n} from \"./graphics\";\n\nexport class SpeedSnek {\n  // store current state\n  private state: State;\n\n  // gameplay status\n  public score: number;\n  public bestScore: number;\n  public speedLimit: number;\n  public speedIncrement: number;\n  public maxSpeed: number;\n\n  // game canvases\n  public speedCanvas: Canvas;\n  public gameCanvas: Canvas;\n  public reqId: number;\n  public inputType: \"mouse\" | \"touch\";\n\n  // game model\n  public snek: Snek;\n  public pellet: Pellet;\n\n  constructor() {\n    // initialize game state\n    this.score = 0;\n    const bestScore = localStorage.getItem(\"bestScore\");\n    this.bestScore = bestScore ? Number(bestScore) : 0;\n    this.speedLimit = 0;\n    this.speedIncrement = 0.05;\n    this.maxSpeed = 5;\n    this.showScore();\n\n    // initialize canvas\n    this.gameCanvas = new Canvas(\"gameBoard\", ...gameSize());\n    const uiElement = document.getElementById(\"ui\") as HTMLElement;\n    uiElement.style.width = `${this.gameCanvas.width}px`;\n    this.speedCanvas = new Canvas(\n      \"speedometer\",\n      undefined,\n      document.getElementById(\"score\")?.clientHeight ?? 60\n    );\n    this.inputType = \"mouse\";\n\n    // initialize game objects\n    this.snek = new Snek(this.gameCanvas);\n    this.pellet = new Pellet(this.gameCanvas.element);\n\n    // Start on title screen\n    this.transitionTo(new Title());\n  }\n\n  public transitionTo(state: State): void {\n    if (this.state) {\n      this.state.exit();\n    }\n\n    console.log(`Context: Transition to ${(<any>state).constructor.name}.`);\n    this.state = state;\n    this.state.setContext(this);\n\n    this.state.enter();\n  }\n\n  public increaseScore() {\n    this.score += 1;\n    this.bestScore = Math.max(this.bestScore, this.score);\n    this.speedLimit = Math.min(\n      this.speedLimit + this.speedIncrement,\n      this.maxSpeed\n    );\n    this.snek.grow();\n  }\n\n  public gameLoop() {\n    this.update();\n    this.render();\n    this.reqId = requestAnimationFrame(() => this.gameLoop());\n  }\n\n  public showScore(): void {\n    const currentScore = document.getElementById(\"currentScore\") as HTMLElement;\n    currentScore.innerHTML = `Score: ${String(this.score).padStart(2, \"\\xa0\")}`;\n\n    const bestScore = document.getElementById(\"bestScore\") as HTMLElement;\n    bestScore.innerHTML = `Best: ${String(this.bestScore).padStart(2, \"\\xa0\")}`;\n  }\n\n  public update(): void {\n    this.showScore();\n    this.state.update();\n  }\n\n  public render(): void {\n    this.gameCanvas.clear();\n    this.speedCanvas.clear();\n    this.state.graphics.render();\n    dispatchEvent(new Event(\"render\"));\n  }\n}\n\nabstract class State {\n  public game: SpeedSnek;\n  public graphics: Composite;\n\n  messageElement: HTMLElement;\n\n  constructor(graphics = new Composite()) {\n    this.graphics = graphics;\n    this.messageElement = document.getElementById(\"message\") as HTMLElement;\n  }\n\n  public setContext(game: SpeedSnek) {\n    this.game = game;\n  }\n\n  public abstract enter(): void;\n  public update(): void {}\n  public abstract exit(): void;\n}\n\n// Display game instructions, show the start button\nexport class Title extends State {\n  constructor() {\n    super();\n  }\n\n  public enter(): void {\n    const info = document.getElementById(\"info\") as HTMLElement;\n    info.style.display = \"flex\";\n    const startMessage = document.getElementById(\"startMessage\") as HTMLElement;\n    startMessage.style.display = \"block\";\n    const endMessage = document.getElementById(\"endMessage\") as HTMLElement;\n    endMessage.style.display = \"none\";\n\n    // Add a click listener to the start button\n    // Transition to Ready state when clicked\n    const startButton = document.getElementById(\n      \"startButton\"\n    ) as HTMLButtonElement;\n\n    startButton.addEventListener(\n      \"click\",\n      (e) => {\n        this.game.transitionTo(new Ready());\n      },\n      { once: true }\n    );\n    startButton.addEventListener(\n      \"pointerup\",\n      (e) => {\n        if (e.pointerType === \"touch\") {\n          this.game.inputType = e.pointerType;\n        }\n      },\n      { once: true }\n    );\n  }\n\n  public exit(): void {\n    const info = document.getElementById(\"info\") as HTMLElement;\n    info.style.display = \"none\";\n  }\n}\n\n// UI and snek are live, ready for user input\nexport class Ready extends State {\n  readyArea!: Arc;\n  readyAreaGraphics!: CanvasCircle;\n\n  constructor() {\n    super();\n    this.checkPlayerReady = this.checkPlayerReady.bind(this);\n  }\n\n  public enter(): void {\n    const pointerType = this.game.inputType === \"mouse\" ? \"cursor\" : \"finger\";\n    this.messageElement.innerText = `${pointerType} on the circle to start`;\n    this.initSpeedGraphics();\n    this.initGameGraphics();\n\n    const gameElement = this.game.gameCanvas.element;\n    gameElement.addEventListener(\"pointerdown\", (e) => {\n      gameElement.releasePointerCapture(e.pointerId);\n    });\n    gameElement.addEventListener(\"pointermove\", this.checkPlayerReady);\n    this.game.gameLoop();\n  }\n\n  initSpeedGraphics() {\n    const speedGraphics = new SpeedGraphics(this.game, this.game.speedCanvas);\n    this.graphics.add(speedGraphics);\n  }\n\n  initGameGraphics() {\n    const snek = this.game.snek;\n\n    const gameGraphics = new Composite();\n\n    // draw cursor line (if in dev mode) and snek\n    if (process.env.NODE_ENV === \"development\") {\n      const cursorLine = new CanvasLine(\n        snek.path,\n        this.game.gameCanvas,\n        red,\n        1\n      );\n      gameGraphics.add(cursorLine);\n    }\n    const snekLine = new CanvasLine(\n      snek.segmentPath,\n      this.game.gameCanvas,\n      green,\n      snek.snekWidth\n    );\n    gameGraphics.add(snekLine);\n    this.graphics.add(gameGraphics);\n\n    // draw circle for starting area\n    this.readyArea = {\n      center: {\n        x: this.game.gameCanvas.width / 2,\n        y: this.game.gameCanvas.height / 2,\n      },\n      radius: 30,\n    };\n    this.readyAreaGraphics = new CanvasCircle(\n      this.readyArea,\n      this.game.gameCanvas,\n      red,\n      5\n    );\n    this.graphics.add(this.readyAreaGraphics);\n  }\n\n  checkPlayerReady(e: PointerEvent) {\n    const gameCanvas = this.game.gameCanvas;\n    const gameWrapper = gameCanvas.element.parentElement as HTMLElement;\n\n    const cursor = {\n      x: e.x - gameWrapper.offsetLeft - gameWrapper.clientLeft,\n      y: e.y - gameWrapper.offsetTop - gameWrapper.clientTop,\n    };\n\n    if (dist(cursor, this.readyArea.center) < this.readyArea.radius) {\n      this.game.transitionTo(new Set(this.graphics));\n    }\n  }\n\n  public exit(): void {\n    this.game.gameCanvas.element.removeEventListener(\n      \"pointermove\",\n      this.checkPlayerReady\n    );\n    this.graphics.remove(this.readyAreaGraphics);\n  }\n}\n\n// UI and snek are live, showing countdown\nexport class Set extends State {\n  startTime: number;\n\n  constructor(graphics: Composite) {\n    super(graphics);\n    this.startTime = Date.now();\n    this.notReady = this.notReady.bind(this);\n  }\n\n  public enter(): void {\n    const gameElement = this.game.gameCanvas.element;\n    gameElement.addEventListener(\"pointermove\", this.game.snek.moveHandler);\n    addEventListener(\"render\", this.game.snek.moveHandler);\n    gameElement.addEventListener(\"pointerleave\", this.notReady, {\n      once: true,\n    });\n  }\n\n  update() {\n    const countStart = 3;\n    const elapsed = (Date.now() - this.startTime) / 1000;\n\n    this.messageElement.innerText = String(countStart - Math.floor(elapsed));\n\n    if (countStart < elapsed) {\n      this.game.transitionTo(new Go(this.graphics));\n    }\n  }\n\n  notReady() {\n    const gameElement = this.game.gameCanvas.element;\n    gameElement.removeEventListener(\"pointermove\", this.game.snek.moveHandler);\n    removeEventListener(\"render\", this.game.snek.moveHandler);\n\n    this.game.transitionTo(new Ready());\n  }\n\n  public exit(): void {\n    this.game.gameCanvas.element.removeEventListener(\n      \"pointerleave\",\n      this.notReady\n    );\n  }\n}\n\n// game is live\nexport class Go extends State {\n  constructor(graphics: Composite) {\n    super(graphics);\n    this.snekLeave = this.snekLeave.bind(this);\n  }\n\n  public enter(): void {\n    // checks that snek is within canvas\n    this.game.gameCanvas.element.addEventListener(\n      \"pointerleave\",\n      this.snekLeave\n    );\n\n    this.messageElement.innerHTML = \"GO!\";\n    setTimeout(() => {\n      this.messageElement.innerText = \"\";\n    }, 1000);\n\n    const pellet = this.game.pellet;\n    const snek = this.game.snek;\n    pellet.place(snek.segmentPath);\n\n    this.graphics.add(\n      new CanvasDisc(\n        { center: this.game.pellet.loc!, radius: this.game.pellet.radius },\n        this.game.gameCanvas,\n        blue\n      )\n    );\n  }\n\n  update() {\n    this.speedCheck();\n    this.snekPelletCollision();\n    this.snekSnekCollision();\n  }\n\n  speedCheck() {\n    if (this.game.snek.speed < this.game.speedLimit) {\n      console.log(\"faster!\");\n      this.game.transitionTo(new GameOver(\"You were too slow!\"));\n    }\n  }\n\n  snekPelletCollision() {\n    if (this.game.pellet.loc) {\n      if (\n        2 <= this.game.snek.segmentPath.length &&\n        intersection(\n          [this.game.snek.segmentPath[0], this.game.snek.segmentPath[1]],\n          {\n            center: this.game.pellet.loc,\n            radius: this.game.pellet.radius + this.game.snek.snekWidth / 2,\n          }\n        )\n      ) {\n        console.log(\"nom!\");\n        this.game.increaseScore();\n        this.game.pellet.place(this.game.snek.segmentPath);\n      }\n    }\n  }\n\n  snekLeave() {\n    console.log(\"whoops!\");\n    this.game.transitionTo(new GameOver(\"You crashed into a wall!\"));\n  }\n\n  snekSnekCollision() {\n    for (let i = 2; i < this.game.snek.segmentPath.length - 1; i++) {\n      if (\n        intersection(\n          [this.game.snek.segmentPath[0], this.game.snek.segmentPath[1]],\n          [this.game.snek.segmentPath[i], this.game.snek.segmentPath[i + 1]]\n        )\n      ) {\n        console.log(\"ouch!\");\n        this.game.transitionTo(new GameOver(\"You crashed into yourself!\"));\n      }\n    }\n  }\n\n  public exit(): void {\n    const gameElement = this.game.gameCanvas.element;\n    gameElement.removeEventListener(\"pointerleave\", this.snekLeave);\n    gameElement.removeEventListener(\"pointermove\", this.game.snek.moveHandler);\n    removeEventListener(\"render\", this.game.snek.moveHandler);\n  }\n}\n\n// Snek is dead :(\nexport class GameOver extends State {\n  reason: string;\n\n  constructor(reason: string) {\n    super();\n    this.reason = reason;\n  }\n\n  public enter(): void {\n    localStorage.setItem(\"bestScore\", String(this.game.bestScore));\n\n    const reasonElement = document.getElementById(\"reason\") as HTMLElement;\n    reasonElement.innerText = this.reason;\n\n    const scoreElement = document.getElementById(\"finalScore\") as HTMLElement;\n    scoreElement.innerText = `Score: ${this.game.score}`;\n\n    const bestElement = document.getElementById(\"best\") as HTMLElement;\n    bestElement.innerText =\n      `Best: ${this.game.bestScore}` +\n      (this.game.score === this.game.bestScore ? \" (NEW BEST!)\" : \"\");\n\n    const info = document.getElementById(\"info\") as HTMLElement;\n    info.style.display = \"flex\";\n\n    const startMessage = document.getElementById(\"startMessage\") as HTMLElement;\n    startMessage.style.display = \"none\";\n    const endMessage = document.getElementById(\"endMessage\") as HTMLElement;\n    endMessage.style.display = \"block\";\n\n    const restartButton = document.getElementById(\n      \"restartButton\"\n    ) as HTMLButtonElement;\n\n    restartButton.addEventListener(\"click\", () => location.reload(), {\n      once: true,\n    });\n  }\n\n  public exit(): void {}\n}\n","import { SpeedSnek } from \"./speedSnek\";\n\naddEventListener(\n  \"load\",\n  () => {\n    console.log(\n      '🐍 says,\\n\"see my source code here: https://github.com/thekakkun/speed-snek!\"'\n    );\n    const speedSnek = new SpeedSnek();\n  },\n  { once: true }\n);\n"],"names":["$512903f9dc58181d$export$6c4a311cc157c764","p1","p2","Math","sqrt","x","y","$512903f9dc58181d$export$bc86dfbf7795668c","seg1","seg2","x1","y1","x2","y2","center","xc","yc","radius","a","b","discriminant","t","x11","y11","x21","y21","x3","y3","x4","y4","t1","u","$de1c67ad03edf268$var$randomBetween","min","max","random","$de1c67ad03edf268$export$5d379a99196b5d4e","constructor","canvas","this","path","timeStamp","rawSpeed","lastEvent","moveHandler","bind","e","PointerEvent","point","element","getBoundingClientRect","unshift","type","length","trim","ix","splice","setSpeed","window","travelled","time","i","super","segments","segLength","snekWidth","speed","segmentPath","width","height","nextSeg","push","calculateSegments","Object","assign","segHead","p","entries","grow","$de1c67ad03edf268$export$8d468b1b2457c918","target","loc","create","place","noGo","buffer","locValid","clientWidth","clientHeight","$11f96767ac22f166$export$e5d96c10a4f7ae2f","borderWidth","parseInt","getComputedStyle","document","getElementById","dispHeight","documentElement","dispWidth","uiHeight","$11f96767ac22f166$export$8d01c972ee8b14a9","id","context","getContext","undefined","setSize","style","floor","devicePixelRatio","scale","clear","clearRect","$11f96767ac22f166$var$Component","setParent","parent","getParent","$11f96767ac22f166$export$43586241d9db0c6d","children","add","component","remove","indexOf","render","child","$11f96767ac22f166$var$GraphicsComponent","data","$11f96767ac22f166$export$12929c049f38ef60","color","ctx","strokeStyle","lineWidth","lineCap","lineJoin","beginPath","moveTo","forEach","lineTo","stroke","$11f96767ac22f166$export$c286ce9e59146edc","arc","PI","$11f96767ac22f166$export$56d6048a90046ca9","fillStyle","fill","$11f96767ac22f166$export$472c2da4f0ac63e5","border","bars","speedLimitPercent","speedLimit","maxSpeed","speedPercent","snek","barWidth","$8afd2f20f372f024$export$201ff456803fd722","score","bestScore","localStorage","getItem","Number","speedIncrement","showScore","gameCanvas","speedCanvas","inputType","pellet","transitionTo","$8afd2f20f372f024$export$f99233281efd08a0","state","exit","console","log","name","setContext","enter","increaseScore","gameLoop","update","reqId","requestAnimationFrame","innerHTML","String","padStart","graphics","dispatchEvent","Event","$8afd2f20f372f024$var$State","messageElement","game","display","startButton","addEventListener","$8afd2f20f372f024$export$7a3e25fda9bd3f90","once","pointerType","checkPlayerReady","innerText","initSpeedGraphics","initGameGraphics","gameElement","releasePointerCapture","pointerId","speedGraphics","gameGraphics","snekLine","readyArea","readyAreaGraphics","gameWrapper","parentElement","offsetLeft","clientLeft","offsetTop","clientTop","$8afd2f20f372f024$export$bdf4ff5a442cbbc5","removeEventListener","startTime","Date","now","notReady","elapsed","$8afd2f20f372f024$export$88743ac60c2d46df","snekLeave","setTimeout","speedCheck","snekPelletCollision","snekSnekCollision","$8afd2f20f372f024$export$5b8da01f83922c02","reason","setItem","location","reload"],"version":3,"file":"index.1db1673f.js.map"}