class t{setParent(t){this.parent=t}getParent(){return this.parent}}class e extends t{children=[];add(t){this.children.push(t),t.setParent(this)}remove(t){const e=this.children.indexOf(t);this.children.splice(e,1),t.setParent(null)}draw(){for(const t of this.children)t.draw()}}class s extends t{constructor(t,e){super(),this.data=t,this.context=e}}function i(t,e){return Math.sqrt((t.x-e.x)**2+(t.y-e.y)**2)}function h(t,e){if("center"in e){const[{x:s,y:i},{x:h,y:a}]=t,{center:{x:o,y:n},radius:r}=e,c=(s-h)**2+(i-a)**2,l=(s-h)*(h-o)+(i-a)*(a-n),d=l**2-c*((h-o)**2+(a-n)**2-r**2);if(d<0)return!1;let p;return p=(-l-Math.sqrt(d))/c,0<=p&&p<=1||(p=(-l+Math.sqrt(d))/c),0<=p&&p<=1&&{x:p*s+(1-p)*h,y:p*i+(1-p)*a}}{const[{x:s,y:i},{x:h,y:a}]=t,[{x:o,y:n},{x:r,y:c}]=e,l=((s-o)*(n-c)-(i-n)*(o-r))/((s-h)*(n-c)-(i-a)*(o-r));if(!(0<=l&&l<=1))return!1;const d=((s-o)*(i-a)-(i-n)*(s-h))/((s-h)*(n-c)-(i-a)*(o-r));return 0<=d&&d<=1&&{x:s+l*(h-s),y:i+l*(a-i)}}}function a(t,e){return Math.random()*(e-t)+t}class o{constructor(t){this.mediator=t}setMediator(t){this.mediator=t}}const n=document.getElementById("game"),r=document.getElementById("ui"),c=n.getContext("2d"),l=r.getContext("2d");n.style.width="512px",n.style.height="688px",r.style.width="512px",r.style.height="80px";const d=window.devicePixelRatio;n.width=Math.floor(512*d),n.height=Math.floor(688*d),r.width=Math.floor(512*d),r.height=Math.floor(80*d),c.scale(d,d),l.scale(d,d);const p=new class extends o{constructor(t){super(),this.path=[],this.timeStamp=[],this.target=t,this.moveHandler=this.moveHandler.bind(this)}moveHandler(t){const e={x:t.x-this.target.offsetLeft,y:t.y-this.target.offsetTop};this.path.unshift(e),this.timeStamp.unshift(t.timeStamp),this.mediator.notify(["pointermove",this])}trim(t){this.path.splice(t),this.timeStamp.splice(t)}getSpeed(t=6){if((t=Math.min(t,this.path.length-1))<2)return 0;let e=0,s=0;for(let h=0;h<t;h++)e+=i(this.path[h],this.path[h+1]),s+=this.timeStamp[h]-this.timeStamp[h+1];return e/s}}(n),x=new class extends o{constructor(t,e=4,s=50,i=10){super(),this.path=[t];for(let t=0;t<e;t++){const e={x:this.path[t].x,y:this.path[t].y+s};this.path.push(e)}this.segments=e,this.segLength=s,this.snekWidth=i}update(t){const e=t.path;this.path=[e[0]];let s=this.path[this.path.length-1];for(let[t,a]of e.entries())if(this.path.length<=this.segments)for(;this.segLength<i(s,a);){if(s=h([e[t-1],a],{center:s,radius:this.segLength}),this.path.push(s),this.segments<this.path.length)break}else if(2*this.segLength<=i(s,a)){this.mediator.notify(["trimpath",this,t]);break}}grow(){this.segments+=1}}({x:n.width/2,y:n.height/2}),m=new class extends o{constructor(t,e,s=15){super(),this.r=s,this.target=t,this.place(e)}place(t,e=30){let s,i;for(;;){if(i=!0,s={x:a(e,this.target.clientWidth-e),y:a(e,this.target.clientHeight-e)},0===t.length){this.loc=s;break}for(let a=0;a<t.length-1;a++)if(h([t[a],t[a+1]],{center:s,radius:this.r+e})){i=!1;break}if(i){this.loc=s;break}}}}(n,x.path),u=new class extends o{constructor(t=0,e=0,s=.08,i=5){super(),this.score=t;const h=localStorage.getItem("maxScore");this.maxScore=this.maxScore?Number(h):0,this.speedLimit=e,this.speedIncrease=s,this.maxSpeed=i,this.speed=e,this.smoothSpeed=e}update(){this.score+=1,this.maxScore=Math.max(this.maxScore,this.score),this.speedLimit=Math.min(this.speedLimit+this.speedIncrease,this.maxSpeed)}updateSpeed(t){this.speed=t.getSpeed(),this.speed,this.smoothSpeed=.1*this.speed+.9*this.smoothSpeed,this.smoothSpeed<this.speedLimit&&this.mediator.notify(["tooslow",this])}gameOver(t){localStorage.setItem("maxScore",String(this.maxScore)),alert(`Game Over!\n${{hitself:"You crashed into yourself!",hitwall:"You crashed into a wall!",tooslow:"You were too slow!"}[t]}\nYour score: ${this.score}`),location.reload()}},g=(new class{constructor(t,e,s,i){this.speedSnek=t,this.speedSnek.setMediator(this),this.cursor=e,this.cursor.setMediator(this),this.snek=s,this.snek.setMediator(this),this.pellet=i,this.pellet.setMediator(this)}notify(t){const[e,s,...i]=t;switch(e){case"pointermove":this.snek.update(s),this.checkCollision(),this.speedSnek.updateSpeed(s);break;case"trimpath":const[,,i]=t;this.cursor.trim(i);break;case"eatpellet":console.log("nom!"),this.snek.grow(),this.speedSnek.update(),this.pellet.place(this.snek.path);break;case"hitself":console.log("ouch!"),this.speedSnek.gameOver(e);break;case"hitwall":console.log("whoops!"),this.speedSnek.gameOver(e);break;case"tooslow":console.log("faster!"),this.speedSnek.gameOver(e);break;default:return s}}checkCollision(){const t=this.snek.path[0];2<=this.cursor.path.length&&h([this.cursor.path[0],this.cursor.path[1]],{center:this.pellet.loc,radius:this.pellet.r+this.snek.snekWidth/2})&&this.notify(["eatpellet",this]),(t.x-1<=0||this.cursor.target.clientWidth-1<=t.x||t.y-1<=0||this.cursor.target.clientHeight-1<=t.y)&&this.notify(["hitwall",this]);for(let t=2;t<this.snek.path.length-1;t++)h([this.snek.path[0],this.snek.path[1]],[this.snek.path[t],this.snek.path[t+1]])&&this.notify(["hitself",this])}}(u,p,x,m),new e);g.add(new class extends s{constructor(t,e){super(t,e)}draw(){this.context.strokeStyle="green",this.context.lineCap="round",this.context.lineJoin="round",this.context.lineWidth=this.data.snekWidth,this.context.beginPath(),this.context.moveTo(this.data.path[0].x,this.data.path[0].y),this.data.path.forEach((t=>{this.context.lineTo(t.x,t.y)})),this.context.stroke()}}(x,c)),g.add(new class extends s{constructor(t,e){super(t,e)}draw(){this.context.fillStyle="blue",this.context.beginPath(),this.context.arc(this.data.loc.x,this.data.loc.y,this.data.r,0,2*Math.PI),this.context.fill()}}(m,c));const f=new e;f.add(new class extends s{constructor(t,e){super(t,e)}draw(){const t=160,e=10,s={x:this.context.canvas.clientWidth-t,y:this.context.canvas.clientHeight-20};this.context.fillStyle="#eee",this.context.fillRect(t,e,s.x,s.y),this.context.fillStyle="orangeRed",this.context.fillRect(t,e,s.x*this.data.speedLimit/this.data.maxSpeed,s.y);const i=Math.min(this.data.smoothSpeed,this.data.maxSpeed);this.context.fillStyle="green",this.context.beginPath(),this.context.moveTo(s.x*i/this.data.maxSpeed-5+t,e+s.y),this.context.lineTo(s.x*i/this.data.maxSpeed+5+t,e+s.y),this.context.lineTo(s.x*i/this.data.maxSpeed+1+t,e+10),this.context.lineTo(s.x*i/this.data.maxSpeed-1+t,e+10),this.context.fill()}scaleX(t){return this.context.canvas.width*t/this.data.maxSpeed}}(u,l)),f.add(new class extends s{constructor(t,e){super(t,e)}draw(){this.context.font="25px monospace",this.context.fillStyle="black",this.context.fillText(`Score: ${this.data.score}`,0,30),this.context.fillText(` Best: ${this.data.maxScore}`,0,60)}}(u,l));const S=new e;S.add(g),S.add(f),document.addEventListener("pointermove",p.moveHandler),function t(){c.clearRect(0,0,n.width,n.height),l.clearRect(0,0,r.width,r.height),S.draw(),requestAnimationFrame(t)}();
//# sourceMappingURL=index.772a783c.js.map
