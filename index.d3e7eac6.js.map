{"mappings":"AAGA,MAAeA,EAGbC,UAAiBC,GACfC,KAAKD,OAASA,C,CAGhBE,YACE,OAAOD,KAAKD,M,EAMT,MAAMG,UAAkBL,EAC7BM,SAAkC,GAElCC,IAAWC,GACTL,KAAKG,SAASG,KAAKD,GACnBA,EAAUP,UAAUE,K,CAGtBO,OAAcF,GACZ,MAAMG,EAAKR,KAAKG,SAASM,QAAQJ,GACjCL,KAAKG,SAASO,OAAOF,EAAI,GAEzBH,EAAUP,UAAU,K,CAGtBa,OACE,IAAK,MAAMC,KAASZ,KAAKG,SACvBS,EAAMD,M,EAKZ,MAAeE,UAAgChB,EAI7CiB,YAAYC,EAAYC,GACtBC,QACAjB,KAAKe,KAAOA,EACZf,KAAKgB,QAAUA,C,ECpCZ,SAASE,EAAKC,EAAWC,GAC9B,OAAOC,KAAKC,MAAMH,EAAGI,EAAIH,EAAGG,IAAM,GAAKJ,EAAGK,EAAIJ,EAAGI,IAAM,E,CAMlD,SAASC,EAAaC,EAAYC,GACvC,GAAI,WAAYA,EAAM,CACpB,OAASJ,EAAGK,EAAIJ,EAAGK,IAAQN,EAAGO,EAAIN,EAAGO,IAAQL,GAE3CM,QAAUT,EAAGU,EAAIT,EAAGU,GAAIC,OACxBA,GACER,EAEES,GAAKR,EAAKE,IAAO,GAAKD,EAAKE,IAAO,EAClCM,GAAKT,EAAKE,IAAOA,EAAKG,IAAOJ,EAAKE,IAAOA,EAAKG,GAG9CI,EAAeD,GAAK,EAAID,IAFnBN,EAAKG,IAAO,GAAKF,EAAKG,IAAO,EAAIC,GAAU,GAGtD,GAAIG,EAAe,EACjB,OAAO,EAGT,IAAIC,EAOJ,OANAA,IAAMF,EAAIhB,KAAKC,KAAKgB,IAAiBF,EAE/B,GAAKG,GAAKA,GAAK,IAEnBA,IAAMF,EAAIhB,KAAKC,KAAKgB,IAAiBF,GAEjC,GAAKG,GAAKA,GAAK,GAKd,CACLhB,EAAGgB,EAAIX,GAAM,EAAIW,GAAKT,EACtBN,EAAGe,EAAIV,GAAM,EAAIU,GAAKR,E,CAEnB,CACL,OAASR,EAAGiB,EAAIhB,EAAGiB,IAAQlB,EAAGmB,EAAIlB,EAAGmB,IAAQjB,IACpCH,EAAGqB,EAAIpB,EAAGqB,IAAQtB,EAAGuB,EAAItB,EAAGuB,IAAQpB,EAEvCqB,IACFR,EAAKI,IAAOC,EAAKE,IAAON,EAAKI,IAAOD,EAAKE,MACzCN,EAAKE,IAAOG,EAAKE,IAAON,EAAKE,IAAOC,EAAKE,IAC7C,KAAM,GAAKE,GAAKA,GAAK,GACnB,OAAO,EAGT,MAAMC,IACFT,EAAKI,IAAOH,EAAKE,IAAOF,EAAKI,IAAOL,EAAKE,MACzCF,EAAKE,IAAOG,EAAKE,IAAON,EAAKE,IAAOC,EAAKE,IAC7C,OAAM,GAAKG,GAAKA,GAAK,GAId,CACL1B,EAAGiB,EAAKQ,GAAKN,EAAKF,GAClBhB,EAAGiB,EAAKO,GAAKL,EAAKF,G,ECpExB,SAASS,EAAcC,EAAaC,GAClC,OAAO/B,KAAKgC,UAAYD,EAAMD,GAAOA,C,CAyHvC,MAAeG,EAGbxC,YAAYyC,GACVvD,KAAKuD,SAAWA,C,CAGlBC,YAAmBD,GACjBvD,KAAKuD,SAAWA,C,EC1HpB,MAIME,EAAaC,SAASC,eAAe,QACrCC,EAAWF,SAASC,eAAe,MACnCE,EAAcJ,EAAWK,WAAW,MACpCC,EAAYH,EAASE,WAAW,MAEtCL,EAAWO,MAAMC,MAAQ,QACzBR,EAAWO,MAAME,OAAS,QAC1BN,EAASI,MAAMC,MAAQ,QACvBL,EAASI,MAAME,OAAS,OAExB,MAAMC,EAAQC,OAAOC,iBACrBZ,EAAWQ,MAAQ5C,KAAKiD,MAfV,IAewBH,GACtCV,EAAWS,OAAS7C,KAAKiD,MAfN,IAeyBH,GAC5CP,EAASK,MAAQ5C,KAAKiD,MAjBR,IAiBsBH,GACpCP,EAASM,OAAS7C,KAAKiD,MAhBN,GAgBuBH,GAExCN,EAAYU,MAAMJ,EAAOA,GACzBJ,EAAUQ,MAAMJ,EAAOA,GAEvB,MAAMK,EAAS,IDkKR,cAAqBlB,EAK1BxC,YAAY2D,GACVxD,QACAjB,KAAK0E,KAAO,GACZ1E,KAAK2E,UAAY,GACjB3E,KAAKyE,OAASA,EACdzE,KAAK4E,YAAc5E,KAAK4E,YAAYC,KAAK7E,K,CAG3C4E,YAAmBE,GACjB,MAAMC,EAAQ,CACZxD,EAAGuD,EAAEvD,EAAIvB,KAAKyE,OAAOO,WACrBxD,EAAGsD,EAAEtD,EAAIxB,KAAKyE,OAAOQ,WAGvBjF,KAAK0E,KAAKQ,QAAQH,GAClB/E,KAAK2E,UAAUO,QAAQJ,EAAEH,WACzB3E,KAAKuD,SAAS4B,OAAO,CAAC,cAAenF,M,CAGvCoF,KAAY5E,GACVR,KAAK0E,KAAKhE,OAAOF,GACjBR,KAAK2E,UAAUjE,OAAOF,E,CAGxB6E,SAAgBjB,EAAS,GAEvB,IADAA,EAAS/C,KAAK8B,IAAIiB,EAAQpE,KAAK0E,KAAKY,OAAS,IAChC,EACX,OAAO,EAGT,IAAIC,EAAY,EACZC,EAAO,EACX,IAAK,IAAIC,EAAI,EAAGA,EAAIrB,EAAQqB,IAC1BF,GAAarE,EAAKlB,KAAK0E,KAAKe,GAAIzF,KAAK0E,KAAKe,EAAI,IAC9CD,GAAQxF,KAAK2E,UAAUc,GAAKzF,KAAK2E,UAAUc,EAAI,GAGjD,OAAOF,EAAYC,C,GC5MG/B,GACpBiC,EAAO,ID+MN,cAAmBpC,EAMxBxC,YAAY6E,EAAiBC,EAAW,EAAGC,EAAY,GAAIC,EAAY,IACrE7E,QAEAjB,KAAK0E,KAAO,CAACiB,GACb,IAAK,IAAIF,EAAI,EAAGA,EAAIG,EAAUH,IAAK,CACjC,MAAMM,EAAU,CACdxE,EAAGvB,KAAK0E,KAAKe,GAAGlE,EAChBC,EAAGxB,KAAK0E,KAAKe,GAAGjE,EAAIqE,GAGtB7F,KAAK0E,KAAKpE,KAAKyF,E,CAGjB/F,KAAK4F,SAAWA,EAChB5F,KAAK6F,UAAYA,EACjB7F,KAAK8F,UAAYA,C,CAGnBE,OAAcC,GACZ,MAAMC,EAAaD,EAAOvB,KAC1B1E,KAAK0E,KAAO,CAACwB,EAAW,IACxB,IAAIC,EAAUnG,KAAK0E,KAAK1E,KAAK0E,KAAKY,OAAS,GAC3C,IAAK,IAAK9E,EAAI4F,KAAMF,EAAWG,UAC7B,GAAIrG,KAAK0E,KAAKY,QAAUtF,KAAK4F,SAC3B,KAAO5F,KAAK6F,UAAY3E,EAAKiF,EAASC,IAAI,CAQxC,GAFAD,EAAU1E,EALE,CAACyE,EAAW1F,EAAK,GAAI4F,GACrB,CACVpE,OAAQmE,EACRhE,OAAQnC,KAAK6F,YAGf7F,KAAK0E,KAAKpE,KAAK6F,GACXnG,KAAK4F,SAAW5F,KAAK0E,KAAKY,OAC5B,K,MAIJ,GAAqB,EAAjBtF,KAAK6F,WAAiB3E,EAAKiF,EAASC,GAAI,CAC1CpG,KAAKuD,SAAS4B,OAAO,CAAC,WAAYnF,KAAMQ,IACxC,K,EAMR8F,OACEtG,KAAK4F,UAAY,C,GCnQC,CACpBrE,EAAGkC,EAAWQ,MAAQ,EACtBzC,EAAGiC,EAAWS,OAAS,IAEnBqC,EAAS,IDmQR,cAAqBjD,EAK1BxC,YAAY2D,EAA2B+B,EAAYC,EAAI,IACrDxF,QAEAjB,KAAKyG,EAAIA,EACTzG,KAAKyE,OAASA,EACdzE,KAAK0G,MAAMF,E,CAIbE,MAAMF,EAAYG,EAAS,IAKzB,IAAIC,EACAC,EAEJ,OAAa,CAQX,GAPAA,GAAW,EACXD,EAAM,CACJrF,EAAG2B,EAAcyD,EAAQ3G,KAAKyE,OAAOqC,YAAcH,GACnDnF,EAAG0B,EAAcyD,EAAQ3G,KAAKyE,OAAOsC,aAAeJ,IAIlC,IAAhBH,EAAKlB,OAAc,CACrBtF,KAAK4G,IAAMA,EACX,K,CAIF,IAAK,IAAInB,EAAI,EAAGA,EAAIe,EAAKlB,OAAS,EAAGG,IACnC,GACEhE,EAAa,CAAC+E,EAAKf,GAAIe,EAAKf,EAAI,IAAK,CACnCzD,OAAQ4E,EACRzE,OAAQnC,KAAKyG,EAAIE,IAEnB,CAEAE,GAAW,EACX,K,CAIJ,GAAIA,EAAU,CACZ7G,KAAK4G,IAAMA,EACX,K,KCtTkBnD,EAAYiC,EAAKhB,MACrCsC,EAAY,IDiGX,cAAwB1D,EAS7BxC,YAAYmG,EAAQ,EAAGC,EAAa,EAAGC,EAAgB,IAAMC,EAAW,GACtEnG,QAEAjB,KAAKiH,MAAQA,EACb,MAAMI,EAAWC,aAAaC,QAAQ,YACtCvH,KAAKqH,SAAWA,EAAWG,OAAOH,GAAY,EAC9CrH,KAAKkH,WAAaA,EAClBlH,KAAKmH,cAAgBA,EACrBnH,KAAKoH,SAAWA,EAChBpH,KAAKyH,MAAQP,EACblH,KAAK0H,YAAcR,C,CAGrBlB,SACEhG,KAAKiH,OAAS,EACdjH,KAAKqH,SAAWhG,KAAK+B,IAAIpD,KAAKqH,SAAUrH,KAAKiH,OAC7CjH,KAAKkH,WAAa7F,KAAK8B,IACrBnD,KAAKkH,WAAalH,KAAKmH,cACvBnH,KAAKoH,S,CAITO,YAAY1B,GAEVjG,KAAKyH,MAAQxB,EAAOZ,WAChBrF,KAAKyH,MACPzH,KAAK0H,YAHO,GAGe1H,KAAKyH,MAAQ,GAAczH,KAAK0H,YAGzD1H,KAAK0H,YAAc1H,KAAKkH,YAC1BlH,KAAKuD,SAAS4B,OAAO,CAAC,UAAWnF,M,CAIrC4H,SAASC,GAOPP,aAAaQ,QAAQ,WAAYC,OAAO/H,KAAKqH,WAG3CW,MAAM,eATQ,CACdC,QAAS,6BACTC,QAAS,2BACTC,QAAS,sBAMoBN,mBAAwB7H,KAAKiH,SAC1DmB,SAASC,Q,GCpJTC,GAFW,IDrBV,MAMLxH,YACEyH,EACAtC,EACAuC,EACAC,GAEAzI,KAAKuI,UAAYA,EACjBvI,KAAKuI,UAAU/E,YAAYxD,MAC3BA,KAAKiG,OAASA,EACdjG,KAAKiG,OAAOzC,YAAYxD,MACxBA,KAAKwI,KAAOA,EACZxI,KAAKwI,KAAKhF,YAAYxD,MACtBA,KAAKyI,OAASA,EACdzI,KAAKyI,OAAOjF,YAAYxD,K,CAG1BmF,OAAcuD,GACZ,MAAOC,EAAOC,KAAWC,GAAQH,EAEjC,OAAQC,GACN,IAAK,cACH3I,KAAKwI,KAAKxC,OAAO4C,GACjB5I,KAAK8I,iBACL9I,KAAKuI,UAAUZ,YAAYiB,GAC3B,MAEF,IAAK,WACH,MAAM,EAAKpI,GAAMkI,EACjB1I,KAAKiG,OAAOb,KAAK5E,GACjB,MAEF,IAAK,YACHuI,QAAQC,IAAI,QACZhJ,KAAKwI,KAAKlC,OACVtG,KAAKuI,UAAUvC,SACfhG,KAAKyI,OAAO/B,MAAM1G,KAAKwI,KAAK9D,MAC5B,MAEF,IAAK,UACHqE,QAAQC,IAAI,SACZhJ,KAAKuI,UAAUX,SAASe,GACxB,MAEF,IAAK,UACHI,QAAQC,IAAI,WACZhJ,KAAKuI,UAAUX,SAASe,GACxB,MAEF,IAAK,UACHI,QAAQC,IAAI,WACZhJ,KAAKuI,UAAUX,SAASe,GACxB,MAEF,QAEE,OADgCC,E,CAKtCE,iBACE,MAAMG,EAAWjJ,KAAKwI,KAAK9D,KAAK,GAI9B,GAAK1E,KAAKiG,OAAOvB,KAAKY,QACtB7D,EAAa,CAACzB,KAAKiG,OAAOvB,KAAK,GAAI1E,KAAKiG,OAAOvB,KAAK,IAAK,CACvD1C,OAAQhC,KAAKyI,OAAO7B,IACpBzE,OAAQnC,KAAKyI,OAAOhC,EAAIzG,KAAKwI,KAAK1C,UAAY,KAGhD9F,KAAKmF,OAAO,CAAC,YAAanF,QAK1BiJ,EAAS1H,EAAI,GAAK,GAClBvB,KAAKiG,OAAOxB,OAAOqC,YAAc,GAAKmC,EAAS1H,GAC/C0H,EAASzH,EAAI,GAAK,GAClBxB,KAAKiG,OAAOxB,OAAOsC,aAAe,GAAKkC,EAASzH,IAEhDxB,KAAKmF,OAAO,CAAC,UAAWnF,OAI1B,IAAK,IAAIyF,EAAI,EAAGA,EAAIzF,KAAKwI,KAAK9D,KAAKY,OAAS,EAAGG,IAE3ChE,EACE,CAACzB,KAAKwI,KAAK9D,KAAK,GAAI1E,KAAKwI,KAAK9D,KAAK,IACnC,CAAC1E,KAAKwI,KAAK9D,KAAKe,GAAIzF,KAAKwI,KAAK9D,KAAKe,EAAI,MAGzCzF,KAAKmF,OAAO,CAAC,UAAWnF,M,GC5EMgH,EAAWxC,EAAQkB,EAAMa,GAE1C,IAAIrG,GAIzBoI,EAAalI,IAAI,IHuBV,cAA2BS,EAChCC,YAAYC,EAAYC,GACtBC,MAAMF,EAAMC,E,CAGdL,OACEX,KAAKgB,QAAQkI,YAAc,QAC3BlJ,KAAKgB,QAAQmI,QAAU,QACvBnJ,KAAKgB,QAAQoI,SAAW,QACxBpJ,KAAKgB,QAAQqI,UAAYrJ,KAAKe,KAAK+E,UACnC9F,KAAKgB,QAAQsI,YACbtJ,KAAKgB,QAAQuI,OAAOvJ,KAAKe,KAAK2D,KAAK,GAAGnD,EAAGvB,KAAKe,KAAK2D,KAAK,GAAGlD,GAC3DxB,KAAKe,KAAK2D,KAAK8E,SAASzE,IACtB/E,KAAKgB,QAAQyI,OAAO1E,EAAMxD,EAAGwD,EAAMvD,EAAE,IAEvCxB,KAAKgB,QAAQ0I,Q,GGtCiBhE,EAAM7B,IACxCyE,EAAalI,IAAI,IHyCV,cAA6BS,EAClCC,YAAYC,EAAcC,GACxBC,MAAMF,EAAMC,E,CAGdL,OACEX,KAAKgB,QAAQ2I,UAAY,OACzB3J,KAAKgB,QAAQsI,YACbtJ,KAAKgB,QAAQ4I,IACX5J,KAAKe,KAAK6F,IAAIrF,EACdvB,KAAKe,KAAK6F,IAAIpF,EACdxB,KAAKe,KAAK0F,EACV,EACU,EAAVpF,KAAKwI,IAEP7J,KAAKgB,QAAQ8I,M,GGxDmBvD,EAAQ1C,IAE5C,MAAMkG,EAAa,IAAI7J,EACvB6J,EAAW3J,IAAI,IHsER,cAA4BS,EACjCC,YAAYC,EAAiBC,GAC3BC,MAAMF,EAAMC,E,CAGdL,OACE,MACMqJ,EACD,IADCA,EADU,GAKVC,EAAY,CAChB1I,EAAGvB,KAAKgB,QAAQkJ,OAAOpD,YAAckD,EACrCxI,EAAGxB,KAAKgB,QAAQkJ,OAAOnD,aAAeoD,IAIxCnK,KAAKgB,QAAQ2I,UAAY,OACzB3J,KAAKgB,QAAQoJ,SAASJ,EAAcA,EAAcC,EAAU1I,EAAG0I,EAAUzI,GAGzExB,KAAKgB,QAAQ2I,UAAY,YACzB3J,KAAKgB,QAAQoJ,SACXJ,EACAA,EACAC,EAAW1I,EAAIvB,KAAKe,KAAKmG,WAAclH,KAAKe,KAAKqG,SACjD6C,EAAUzI,GAIZ,MAAMiG,EAAQpG,KAAK8B,IAAInD,KAAKe,KAAK2G,YAAa1H,KAAKe,KAAKqG,UACxDpH,KAAKgB,QAAQ2I,UAAY,QACzB3J,KAAKgB,QAAQsI,YACbtJ,KAAKgB,QAAQuI,OACXU,EAAW1I,EAAIkG,EAASzH,KAAKe,KAAKqG,SAAW,EAAI4C,EACjDA,EAAeC,EAAUzI,GAE3BxB,KAAKgB,QAAQyI,OACXQ,EAAW1I,EAAIkG,EAASzH,KAAKe,KAAKqG,SAAW,EAAI4C,EACjDA,EAAeC,EAAUzI,GAE3BxB,KAAKgB,QAAQyI,OACXQ,EAAW1I,EAAIkG,EAASzH,KAAKe,KAAKqG,SAAW,EAAI4C,EACjDA,EAAe,IAEjBhK,KAAKgB,QAAQyI,OACXQ,EAAW1I,EAAIkG,EAASzH,KAAKe,KAAKqG,SAAW,EAAI4C,EACjDA,EAAe,IAEjBhK,KAAKgB,QAAQ8I,M,CAGfO,OAAOC,GACL,OAAOtK,KAAMgB,QAAQkJ,OAAOjG,MAAQqG,EAAStK,KAAKe,KAAKqG,Q,GG3H1BJ,EAAWjD,IAC5CgG,EAAW3J,IAAI,IHwDR,cAA4BS,EACjCC,YAAYC,EAAiBC,GAC3BC,MAAMF,EAAMC,E,CAGdL,OACEX,KAAKgB,QAAQuJ,KAAO,iBACpBvK,KAAKgB,QAAQ2I,UAAY,QACzB3J,KAAKgB,QAAQwJ,SAAS,UAAUxK,KAAKe,KAAKkG,QAAS,EAAG,IACtDjH,KAAKgB,QAAQwJ,SAAS,UAAUxK,KAAKe,KAAKsG,WAAY,EAAG,G,GGjE5BL,EAAWjD,IAE5C,MAAM0G,EAAW,IAAIvK,EACrBuK,EAASrK,IAAIkI,GACbmC,EAASrK,IAAI2J,GAEbrG,SAASgH,iBAAiB,cAAelG,EAAOI,aAEhD,SAAS+F,IACP9G,EAAY+G,UAAU,EAAG,EAAGnH,EAAWQ,MAAOR,EAAWS,QACzDH,EAAU6G,UAAU,EAAG,EAAGhH,EAASK,MAAOL,EAASM,QAEnDuG,EAAS9J,OACTkK,sBAAsBF,E,CAExBA","sources":["src/scripts/graphics.ts","src/scripts/geometry.ts","src/scripts/model.ts","src/scripts/main.ts"],"sourcesContent":["import { Point } from \"./geometry\";\nimport { Cursor, Snek, Pellet, SpeedSnek } from \"./model\";\n\nabstract class Component {\n  protected parent!: Component | null;\n\n  public setParent(parent: Component | null) {\n    this.parent = parent;\n  }\n\n  public getParent(): Component | null {\n    return this.parent;\n  }\n\n  public abstract draw(): void;\n}\n\nexport class Composite extends Component {\n  protected children: Component[] = [];\n\n  public add(component: Component) {\n    this.children.push(component);\n    component.setParent(this);\n  }\n\n  public remove(component: Component) {\n    const ix = this.children.indexOf(component);\n    this.children.splice(ix, 1);\n\n    component.setParent(null);\n  }\n\n  public draw() {\n    for (const child of this.children) {\n      child.draw();\n    }\n  }\n}\n\nabstract class GraphicsComponent<Type> extends Component {\n  public data: Type;\n  public context: CanvasRenderingContext2D;\n\n  constructor(data: Type, context: CanvasRenderingContext2D) {\n    super();\n    this.data = data;\n    this.context = context;\n  }\n}\n\nexport class CursorGraphics extends GraphicsComponent<Cursor> {\n  constructor(data: Cursor, context: CanvasRenderingContext2D) {\n    super(data, context);\n  }\n\n  draw() {\n    if (this.data.path.length !== 0) {\n      this.context.strokeStyle = \"red\";\n      this.context.lineWidth = 1;\n      this.context.beginPath();\n      this.context.moveTo(this.data.path[0].x, this.data.path[0].y);\n      this.data.path.forEach((point: Point) => {\n        this.context.lineTo(point.x, point.y);\n      });\n      this.context.stroke();\n    }\n  }\n}\n\nexport class SnekGraphics extends GraphicsComponent<Snek> {\n  constructor(data: Snek, context: CanvasRenderingContext2D) {\n    super(data, context);\n  }\n\n  draw() {\n    this.context.strokeStyle = \"green\";\n    this.context.lineCap = \"round\";\n    this.context.lineJoin = \"round\";\n    this.context.lineWidth = this.data.snekWidth;\n    this.context.beginPath();\n    this.context.moveTo(this.data.path[0].x, this.data.path[0].y);\n    this.data.path.forEach((point: Point) => {\n      this.context.lineTo(point.x, point.y);\n    });\n    this.context.stroke();\n  }\n}\n\nexport class PelletGraphics extends GraphicsComponent<Pellet> {\n  constructor(data: Pellet, context: CanvasRenderingContext2D) {\n    super(data, context);\n  }\n\n  draw() {\n    this.context.fillStyle = \"blue\";\n    this.context.beginPath();\n    this.context.arc(\n      this.data.loc.x,\n      this.data.loc.y,\n      this.data.r,\n      0,\n      Math.PI * 2\n    );\n    this.context.fill();\n  }\n}\n\nexport class ScoreGraphics extends GraphicsComponent<SpeedSnek> {\n  constructor(data: SpeedSnek, context: CanvasRenderingContext2D) {\n    super(data, context);\n  }\n\n  draw() {\n    this.context.font = \"25px monospace\";\n    this.context.fillStyle = \"black\";\n    this.context.fillText(`Score: ${this.data.score}`, 0, 30);\n    this.context.fillText(` Best: ${this.data.maxScore}`, 0, 60);\n  }\n}\n\nexport class SpeedGraphics extends GraphicsComponent<SpeedSnek> {\n  constructor(data: SpeedSnek, context: CanvasRenderingContext2D) {\n    super(data, context);\n  }\n\n  draw() {\n    const padding = 10;\n    const meterStart = {\n      x: 160,\n      y: padding,\n    };\n    const meterSize = {\n      x: this.context.canvas.clientWidth - meterStart.x,\n      y: this.context.canvas.clientHeight - padding * 2,\n    };\n\n    // Speed meter background\n    this.context.fillStyle = \"#eee\";\n    this.context.fillRect(meterStart.x, meterStart.y, meterSize.x, meterSize.y);\n\n    // Speed limit line\n    this.context.fillStyle = \"orangeRed\";\n    this.context.fillRect(\n      meterStart.x,\n      meterStart.y,\n      (meterSize.x * this.data.speedLimit) / this.data.maxSpeed,\n      meterSize.y\n    );\n\n    // Speedometer needle\n    const speed = Math.min(this.data.smoothSpeed, this.data.maxSpeed)\n    this.context.fillStyle = \"green\";\n    this.context.beginPath();\n    this.context.moveTo(\n      (meterSize.x * speed) / this.data.maxSpeed - 5 + meterStart.x,\n      meterStart.y + meterSize.y\n    );\n    this.context.lineTo(\n      (meterSize.x * speed) / this.data.maxSpeed + 5 + meterStart.x,\n      meterStart.y + meterSize.y\n    );\n    this.context.lineTo(\n      (meterSize.x * speed) / this.data.maxSpeed + 1 + meterStart.x,\n      meterStart.y + 10\n    );\n    this.context.lineTo(\n      (meterSize.x * speed) / this.data.maxSpeed - 1 + meterStart.x,\n      meterStart.y + 10\n    );\n    this.context.fill();\n  }\n\n  scaleX(value: number) {\n    return (this.context.canvas.width * value) / this.data.maxSpeed;\n  }\n}\n\n\n","export interface Point {\n  x: number;\n  y: number;\n}\nexport interface Arc {\n  center: Point;\n  radius: number;\n}\nexport type Path = Point[];\n\nexport function dist(p1: Point, p2: Point): number {\n  return Math.sqrt((p1.x - p2.x) ** 2 + (p1.y - p2.y) ** 2);\n}\n\n// Return intersection point if lines intersect, false if no intersection.\nexport function intersection(seg1: Path, arc: Arc): Point | false;\nexport function intersection(seg1: Path, seg2: Path): Point | false;\nexport function intersection(seg1: Path, seg2: Arc | Path): Point | false {\n  if (\"center\" in seg2) {\n    const [{ x: x1, y: y1 }, { x: x2, y: y2 }] = seg1;\n    const {\n      center: { x: xc, y: yc },\n      radius,\n    } = seg2;\n\n    const a = (x1 - x2) ** 2 + (y1 - y2) ** 2;\n    const b = (x1 - x2) * (x2 - xc) + (y1 - y2) * (y2 - yc);\n    const c = (x2 - xc) ** 2 + (y2 - yc) ** 2 - radius ** 2;\n\n    const discriminant = b ** 2 - a * c;\n    if (discriminant < 0) {\n      return false;\n    }\n\n    let t: number;\n    t = (-b - Math.sqrt(discriminant)) / a;\n\n    if (!(0 <= t && t <= 1)) {\n      // getting the other intersection\n      t = (-b + Math.sqrt(discriminant)) / a;\n    }\n    if (!(0 <= t && t <= 1)) {\n      // t still out of range? then no intersection.\n      return false;\n    }\n\n    return {\n      x: t * x1 + (1 - t) * x2,\n      y: t * y1 + (1 - t) * y2,\n    };\n  } else {\n    const [{ x: x1, y: y1 }, { x: x2, y: y2 }] = seg1;\n    const [{ x: x3, y: y3 }, { x: x4, y: y4 }] = seg2;\n\n    const t =\n      ((x1 - x3) * (y3 - y4) - (y1 - y3) * (x3 - x4)) /\n      ((x1 - x2) * (y3 - y4) - (y1 - y2) * (x3 - x4));\n    if (!(0 <= t && t <= 1)) {\n      return false;\n    }\n\n    const u =\n      ((x1 - x3) * (y1 - y2) - (y1 - y3) * (x1 - x2)) /\n      ((x1 - x2) * (y3 - y4) - (y1 - y2) * (x3 - x4));\n    if (!(0 <= u && u <= 1)) {\n      return false;\n    }\n\n    return {\n      x: x1 + t * (x2 - x1),\n      y: y1 + t * (y2 - y1),\n    };\n  }\n}\n","import { dist, intersection, Path, Point } from \"./geometry\";\n\nfunction randomBetween(min: number, max: number) {\n  return Math.random() * (max - min) + min;\n}\n\ntype Notification =\n  | [\"pointermove\", Cursor]\n  | [\"trimpath\", Snek, number]\n  | [\"eatpellet\", ConcreteMediator]\n  | [\"hitself\", ConcreteMediator]\n  | [\"hitwall\", ConcreteMediator]\n  | [\"tooslow\", SpeedSnek];\n\ninterface Mediator {\n  notify(notification: Notification): void;\n}\n\n// events are sent here, and the mediator passes them on to the correct handler.\nexport class ConcreteMediator implements Mediator {\n  public speedSnek: SpeedSnek;\n  private cursor: Cursor;\n  private snek: Snek;\n  private pellet: Pellet;\n\n  constructor(\n    speedSnek: SpeedSnek,\n    cursor: Cursor,\n    snek: Snek,\n    pellet: Pellet\n  ) {\n    this.speedSnek = speedSnek;\n    this.speedSnek.setMediator(this);\n    this.cursor = cursor;\n    this.cursor.setMediator(this);\n    this.snek = snek;\n    this.snek.setMediator(this);\n    this.pellet = pellet;\n    this.pellet.setMediator(this);\n  }\n\n  public notify(notification: Notification): void {\n    const [event, sender, ...args] = notification;\n\n    switch (event) {\n      case \"pointermove\":\n        this.snek.update(sender);\n        this.checkCollision();\n        this.speedSnek.updateSpeed(sender);\n        break;\n\n      case \"trimpath\":\n        const [, , ix] = notification;\n        this.cursor.trim(ix);\n        break;\n\n      case \"eatpellet\":\n        console.log(\"nom!\");\n        this.snek.grow();\n        this.speedSnek.update();\n        this.pellet.place(this.snek.path);\n        break;\n\n      case \"hitself\":\n        console.log(\"ouch!\");\n        this.speedSnek.gameOver(event);\n        break;\n\n      case \"hitwall\":\n        console.log(\"whoops!\");\n        this.speedSnek.gameOver(event);\n        break;\n\n      case \"tooslow\":\n        console.log(\"faster!\");\n        this.speedSnek.gameOver(event);\n        break;\n\n      default:\n        const _exhaustiveCheck: never = sender;\n        return _exhaustiveCheck;\n    }\n  }\n\n  checkCollision() {\n    const snekHead = this.snek.path[0];\n\n    // snek vs pellet collisions\n    if (\n      2 <= this.cursor.path.length &&\n      intersection([this.cursor.path[0], this.cursor.path[1]], {\n        center: this.pellet.loc,\n        radius: this.pellet.r + this.snek.snekWidth / 2,\n      })\n    ) {\n      this.notify([\"eatpellet\", this]);\n    }\n\n    // // snek vs wall collisions\n    if (\n      snekHead.x - 1 <= 0 ||\n      this.cursor.target.clientWidth - 1 <= snekHead.x ||\n      snekHead.y - 1 <= 0 ||\n      this.cursor.target.clientHeight - 1 <= snekHead.y\n    ) {\n      this.notify([\"hitwall\", this]);\n    }\n\n    // snek vs snek collisions\n    for (let i = 2; i < this.snek.path.length - 1; i++) {\n      if (\n        intersection(\n          [this.snek.path[0], this.snek.path[1]],\n          [this.snek.path[i], this.snek.path[i + 1]]\n        )\n      ) {\n        this.notify([\"hitself\", this]);\n      }\n    }\n  }\n}\n\n// Components contain some sort of logic and can reference their mediators\n// Things in the game that have data that need updating.\nabstract class Component {\n  protected mediator: Mediator;\n\n  constructor(mediator?: Mediator) {\n    this.mediator = mediator!;\n  }\n\n  public setMediator(mediator: Mediator): void {\n    this.mediator = mediator;\n  }\n}\n\nexport class SpeedSnek extends Component {\n  score: number;\n  maxScore: number;\n  speedLimit: number;\n  speedIncrease: number;\n  maxSpeed: number;\n  speed: number;\n  smoothSpeed: number;\n\n  constructor(score = 0, speedLimit = 0, speedIncrease = 0.08, maxSpeed = 5) {\n    super();\n\n    this.score = score;\n    const maxScore = localStorage.getItem(\"maxScore\");\n    this.maxScore = maxScore ? Number(maxScore) : 0;\n    this.speedLimit = speedLimit;\n    this.speedIncrease = speedIncrease;\n    this.maxSpeed = maxSpeed;\n    this.speed = speedLimit;\n    this.smoothSpeed = speedLimit;\n  }\n\n  update() {\n    this.score += 1;\n    this.maxScore = Math.max(this.maxScore, this.score);\n    this.speedLimit = Math.min(\n      this.speedLimit + this.speedIncrease,\n      this.maxSpeed\n    );\n  }\n\n  updateSpeed(cursor: Cursor) {\n    const alpha = 0.1;\n    this.speed = cursor.getSpeed();\n    if (this.speed !== NaN) {\n      this.smoothSpeed = alpha * this.speed + (1 - alpha) * this.smoothSpeed;\n    }\n\n    if (this.smoothSpeed < this.speedLimit) {\n      this.mediator.notify([\"tooslow\", this]);\n    }\n  }\n\n  gameOver(reason: Notification[0]) {\n    const message = {\n      hitself: \"You crashed into yourself!\",\n      hitwall: \"You crashed into a wall!\",\n      tooslow: \"You were too slow!\",\n    };\n\n    localStorage.setItem(\"maxScore\", String(this.maxScore));\n\n    if (process.env.NODE_ENV === \"production\") {\n      alert(`Game Over!\\n${message[reason]}\\nYour score: ${this.score}`);\n      location.reload();\n    }\n  }\n}\n\nexport class Cursor extends Component {\n  path: Path;\n  timeStamp: number[];\n  target: HTMLCanvasElement;\n\n  constructor(target: HTMLCanvasElement) {\n    super();\n    this.path = [];\n    this.timeStamp = [];\n    this.target = target;\n    this.moveHandler = this.moveHandler.bind(this);\n  }\n\n  public moveHandler(e: PointerEvent) {\n    const point = {\n      x: e.x - this.target.offsetLeft,\n      y: e.y - this.target.offsetTop,\n    };\n\n    this.path.unshift(point);\n    this.timeStamp.unshift(e.timeStamp);\n    this.mediator.notify([\"pointermove\", this]);\n  }\n\n  public trim(ix: number) {\n    this.path.splice(ix);\n    this.timeStamp.splice(ix);\n  }\n\n  public getSpeed(window = 6) {\n    window = Math.min(window, this.path.length - 1);\n    if (window < 2) {\n      return 0;\n    }\n\n    let travelled = 0;\n    let time = 0;\n    for (let i = 0; i < window; i++) {\n      travelled += dist(this.path[i], this.path[i + 1]);\n      time += this.timeStamp[i] - this.timeStamp[i + 1];\n    }\n\n    return travelled / time;\n  }\n}\n\nexport class Snek extends Component {\n  segments: number;\n  segLength: number;\n  path: Path;\n  snekWidth: number;\n\n  constructor(startLoc: Point, segments = 4, segLength = 50, snekWidth = 10) {\n    super();\n\n    this.path = [startLoc];\n    for (let i = 0; i < segments; i++) {\n      const nextSeg = {\n        x: this.path[i].x,\n        y: this.path[i].y + segLength,\n      };\n\n      this.path.push(nextSeg);\n    }\n\n    this.segments = segments;\n    this.segLength = segLength;\n    this.snekWidth = snekWidth;\n  }\n\n  public update(cursor: Cursor) {\n    const cursorPath = cursor.path;\n    this.path = [cursorPath[0]];\n    let segHead = this.path[this.path.length - 1];\n    for (let [ix, p] of cursorPath.entries()) {\n      if (this.path.length <= this.segments) {\n        while (this.segLength < dist(segHead, p)) {\n          const seg = [cursorPath[ix - 1], p];\n          const arc = {\n            center: segHead,\n            radius: this.segLength,\n          };\n          segHead = intersection(seg, arc) as Point;\n          this.path.push(segHead);\n          if (this.segments < this.path.length) {\n            break;\n          }\n        }\n      } else {\n        if (this.segLength * 2 <= dist(segHead, p)) {\n          this.mediator.notify([\"trimpath\", this, ix]);\n          break;\n        }\n      }\n    }\n  }\n\n  public grow() {\n    this.segments += 1;\n  }\n}\n\nexport class Pellet extends Component {\n  target: HTMLCanvasElement;\n  loc: Point;\n  r: number;\n\n  constructor(target: HTMLCanvasElement, noGo: Path, r = 15) {\n    super();\n\n    this.r = r;\n    this.target = target;\n    this.place(noGo);\n  }\n\n  // Choose random points within bb (bounding box) until no walls or snek\n  place(noGo: Path, buffer = 30) {\n    if (noGo !== undefined) {\n      noGo = noGo;\n    }\n\n    let loc: Point;\n    let locValid: boolean;\n\n    while (true) {\n      locValid = true;\n      loc = {\n        x: randomBetween(buffer, this.target.clientWidth - buffer),\n        y: randomBetween(buffer, this.target.clientHeight - buffer),\n      };\n\n      // Place is fine if there is no noGo\n      if (noGo.length === 0) {\n        this.loc = loc;\n        break;\n      }\n\n      // Check if pellet location within buffer distance of noGo path.\n      for (let i = 0; i < noGo.length - 1; i++) {\n        if (\n          intersection([noGo[i], noGo[i + 1]], {\n            center: loc,\n            radius: this.r + buffer,\n          })\n        ) {\n          // loc is too close to noGo, try again.\n          locValid = false;\n          break;\n        }\n      }\n\n      if (locValid) {\n        this.loc = loc;\n        break;\n      }\n    }\n  }\n}\n","import {\n  Composite,\n  CursorGraphics,\n  PelletGraphics,\n  ScoreGraphics,\n  SnekGraphics,\n  SpeedGraphics,\n} from \"./graphics\";\nimport { ConcreteMediator, Cursor, Snek, Pellet, SpeedSnek } from \"./model\";\n\nconst width = 512;\nconst gameHeight = 688;\nconst uiHeight = 80;\n\nconst gameCanvas = document.getElementById(\"game\") as HTMLCanvasElement;\nconst uiCanvas = document.getElementById(\"ui\") as HTMLCanvasElement;\nconst gameContext = gameCanvas.getContext(\"2d\") as CanvasRenderingContext2D;\nconst uiContext = uiCanvas.getContext(\"2d\") as CanvasRenderingContext2D;\n\ngameCanvas.style.width = `${width}px`;\ngameCanvas.style.height = `${gameHeight}px`;\nuiCanvas.style.width = `${width}px`;\nuiCanvas.style.height = `${uiHeight}px`;\n\nconst scale = window.devicePixelRatio;\ngameCanvas.width = Math.floor(width * scale);\ngameCanvas.height = Math.floor(gameHeight * scale);\nuiCanvas.width = Math.floor(width * scale);\nuiCanvas.height = Math.floor(uiHeight * scale);\n\ngameContext.scale(scale, scale);\nuiContext.scale(scale, scale);\n\nconst cursor = new Cursor(gameCanvas);\nconst snek = new Snek({\n  x: gameCanvas.width / 2,\n  y: gameCanvas.height / 2,\n});\nconst pellet = new Pellet(gameCanvas, snek.path);\nconst speedSnek = new SpeedSnek();\nconst mediator = new ConcreteMediator(speedSnek, cursor, snek, pellet);\n\nconst gameGraphics = new Composite();\nif (process.env.NODE_ENV === \"development\") {\n  gameGraphics.add(new CursorGraphics(cursor, gameContext));\n}\ngameGraphics.add(new SnekGraphics(snek, gameContext));\ngameGraphics.add(new PelletGraphics(pellet, gameContext));\n\nconst uiGraphics = new Composite();\nuiGraphics.add(new SpeedGraphics(speedSnek, uiContext));\nuiGraphics.add(new ScoreGraphics(speedSnek, uiContext));\n\nconst graphics = new Composite();\ngraphics.add(gameGraphics);\ngraphics.add(uiGraphics);\n\ndocument.addEventListener(\"pointermove\", cursor.moveHandler);\n\nfunction draw() {\n  gameContext.clearRect(0, 0, gameCanvas.width, gameCanvas.height);\n  uiContext.clearRect(0, 0, uiCanvas.width, uiCanvas.height);\n\n  graphics.draw();\n  requestAnimationFrame(draw);\n}\ndraw();\n"],"names":["$11f96767ac22f166$var$Component","setParent","parent","this","getParent","$11f96767ac22f166$export$43586241d9db0c6d","children","add","component","push","remove","ix","indexOf","splice","draw","child","$11f96767ac22f166$var$GraphicsComponent","constructor","data","context","super","$512903f9dc58181d$export$6c4a311cc157c764","p1","p2","Math","sqrt","x","y","$512903f9dc58181d$export$bc86dfbf7795668c","seg1","seg2","x1","y1","x2","y2","center","xc","yc","radius","a","b","discriminant","t","x11","y11","x21","y21","x3","y3","x4","y4","t1","u","$de1c67ad03edf268$var$randomBetween","min","max","random","$de1c67ad03edf268$var$Component","mediator","setMediator","$1ccc8d3c866b7484$var$gameCanvas","document","getElementById","$1ccc8d3c866b7484$var$uiCanvas","$1ccc8d3c866b7484$var$gameContext","getContext","$1ccc8d3c866b7484$var$uiContext","style","width","height","$1ccc8d3c866b7484$var$scale","window","devicePixelRatio","floor","scale","$1ccc8d3c866b7484$var$cursor","target","path","timeStamp","moveHandler","bind","e","point","offsetLeft","offsetTop","unshift","notify","trim","getSpeed","length","travelled","time","i","$1ccc8d3c866b7484$var$snek","startLoc","segments","segLength","snekWidth","nextSeg","update","cursor","cursorPath","segHead","p","entries","grow","$1ccc8d3c866b7484$var$pellet","noGo","r","place","buffer","loc","locValid","clientWidth","clientHeight","$1ccc8d3c866b7484$var$speedSnek","score","speedLimit","speedIncrease","maxSpeed","maxScore","localStorage","getItem","Number","speed","smoothSpeed","updateSpeed","gameOver","reason","setItem","String","alert","hitself","hitwall","tooslow","location","reload","$1ccc8d3c866b7484$var$gameGraphics","speedSnek","snek","pellet","notification","event","sender","args","checkCollision","console","log","snekHead","strokeStyle","lineCap","lineJoin","lineWidth","beginPath","moveTo","forEach","lineTo","stroke","fillStyle","arc","PI","fill","$1ccc8d3c866b7484$var$uiGraphics","meterStart","meterSize","canvas","padding","fillRect","scaleX","value","font","fillText","$1ccc8d3c866b7484$var$graphics","addEventListener","$1ccc8d3c866b7484$var$draw","clearRect","requestAnimationFrame"],"version":3,"file":"index.d3e7eac6.js.map"}