{"mappings":"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","sources":["src/scripts/graphics.ts","src/scripts/geometry.ts","src/scripts/model.ts","src/scripts/main.ts"],"sourcesContent":["import { Point } from \"./geometry\";\nimport { Cursor, Snek, Pellet, SpeedSnek } from \"./model\";\n\nabstract class Component {\n  protected parent!: Component | null;\n\n  public setParent(parent: Component | null) {\n    this.parent = parent;\n  }\n\n  public getParent(): Component | null {\n    return this.parent;\n  }\n\n  public abstract draw(): void;\n}\n\nexport class Composite extends Component {\n  protected children: Component[] = [];\n\n  public add(component: Component) {\n    this.children.push(component);\n    component.setParent(this);\n  }\n\n  public remove(component: Component) {\n    const ix = this.children.indexOf(component);\n    this.children.splice(ix, 1);\n\n    component.setParent(null);\n  }\n\n  public draw() {\n    for (const child of this.children) {\n      child.draw();\n    }\n  }\n}\n\nabstract class GraphicsComponent<Type> extends Component {\n  public data: Type;\n  public context: CanvasRenderingContext2D;\n\n  constructor(data: Type, context: CanvasRenderingContext2D) {\n    super();\n    this.data = data;\n    this.context = context;\n  }\n}\n\nexport class CursorGraphics extends GraphicsComponent<Cursor> {\n  constructor(data: Cursor, context: CanvasRenderingContext2D) {\n    super(data, context);\n  }\n\n  draw() {\n    if (this.data.path.length !== 0) {\n      this.context.strokeStyle = \"red\";\n      this.context.lineWidth = 1;\n      this.context.beginPath();\n      this.context.moveTo(this.data.path[0].x, this.data.path[0].y);\n      this.data.path.forEach((point: Point) => {\n        this.context.lineTo(point.x, point.y);\n      });\n      this.context.stroke();\n    }\n  }\n}\n\nexport class SnekGraphics extends GraphicsComponent<Snek> {\n  constructor(data: Snek, context: CanvasRenderingContext2D) {\n    super(data, context);\n  }\n\n  draw() {\n    this.context.strokeStyle = \"green\";\n    this.context.lineCap = \"round\";\n    this.context.lineJoin = \"round\";\n    this.context.lineWidth = this.data.snekWidth;\n    this.context.beginPath();\n    this.context.moveTo(this.data.path[0].x, this.data.path[0].y);\n    this.data.path.forEach((point: Point) => {\n      this.context.lineTo(point.x, point.y);\n    });\n    this.context.stroke();\n  }\n}\n\nexport class PelletGraphics extends GraphicsComponent<Pellet> {\n  constructor(data: Pellet, context: CanvasRenderingContext2D) {\n    super(data, context);\n  }\n\n  draw() {\n    this.context.fillStyle = \"blue\";\n    this.context.beginPath();\n    this.context.arc(\n      this.data.loc.x,\n      this.data.loc.y,\n      this.data.r,\n      0,\n      Math.PI * 2\n    );\n    this.context.fill();\n  }\n}\n\nexport class UiGraphics extends GraphicsComponent<SpeedSnek> {\n  constructor(data: SpeedSnek, context: CanvasRenderingContext2D) {\n    super(data, context);\n  }\n\n  draw() {\n    const needleLoc = this.scaleX(this.data.smoothSpeed);\n\n    // Speed limit line\n    this.context.strokeStyle = \"orangeRed\";\n    this.context.lineWidth = 5;\n    this.context.beginPath();\n    this.context.moveTo(this.scaleX(this.data.speedLimit), 0);\n    this.context.lineTo(this.scaleX(this.data.speedLimit), 50);\n    this.context.stroke();\n\n    // Speedometer needle\n    this.context.fillStyle = \"green\";\n    this.context.beginPath();\n    this.context.moveTo(needleLoc, 50);\n    this.context.lineTo(needleLoc - 5, 0);\n    this.context.lineTo(needleLoc + 5, 0);\n    this.context.fill();\n  }\n\n  scaleX(value: number) {\n    return (this.context.canvas.width * value) / this.data.maxSpeed;\n  }\n}\n","export interface Point {\n  x: number;\n  y: number;\n}\nexport interface Arc {\n  center: Point;\n  radius: number;\n}\nexport type Path = Point[];\n\nexport function dist(p1: Point, p2: Point): number {\n  return Math.sqrt((p1.x - p2.x) ** 2 + (p1.y - p2.y) ** 2);\n}\n\n// Return intersection point if lines intersect, false if no intersection.\nexport function intersection(seg1: Path, arc: Arc): Point | false;\nexport function intersection(seg1: Path, seg2: Path): Point | false;\nexport function intersection(seg1: Path, seg2: Arc | Path): Point | false {\n  if (\"center\" in seg2) {\n    const [{ x: x1, y: y1 }, { x: x2, y: y2 }] = seg1;\n    const {\n      center: { x: xc, y: yc },\n      radius,\n    } = seg2;\n\n    const a = (x1 - x2) ** 2 + (y1 - y2) ** 2;\n    const b = (x1 - x2) * (x2 - xc) + (y1 - y2) * (y2 - yc);\n    const c = (x2 - xc) ** 2 + (y2 - yc) ** 2 - radius ** 2;\n\n    const discriminant = b ** 2 - a * c;\n    if (discriminant < 0) {\n      return false;\n    }\n\n    let t: number;\n    t = (-b - Math.sqrt(discriminant)) / a;\n\n    if (!(0 <= t && t <= 1)) {\n      // getting the other intersection\n      t = (-b + Math.sqrt(discriminant)) / a;\n    }\n    if (!(0 <= t && t <= 1)) {\n      // t still out of range? then no intersection.\n      return false;\n    }\n\n    return {\n      x: t * x1 + (1 - t) * x2,\n      y: t * y1 + (1 - t) * y2,\n    };\n  } else {\n    const [{ x: x1, y: y1 }, { x: x2, y: y2 }] = seg1;\n    const [{ x: x3, y: y3 }, { x: x4, y: y4 }] = seg2;\n\n    const t =\n      ((x1 - x3) * (y3 - y4) - (y1 - y3) * (x3 - x4)) /\n      ((x1 - x2) * (y3 - y4) - (y1 - y2) * (x3 - x4));\n    if (!(0 <= t && t <= 1)) {\n      return false;\n    }\n\n    const u =\n      ((x1 - x3) * (y1 - y2) - (y1 - y3) * (x1 - x2)) /\n      ((x1 - x2) * (y3 - y4) - (y1 - y2) * (x3 - x4));\n    if (!(0 <= u && u <= 1)) {\n      return false;\n    }\n\n    return {\n      x: x1 + t * (x2 - x1),\n      y: y1 + t * (y2 - y1),\n    };\n  }\n}\n","import { dist, intersection, Path, Point } from \"./geometry\";\n\nfunction randomBetween(min: number, max: number) {\n  return Math.random() * (max - min) + min;\n}\n\ntype Notification =\n  | [\"pointermove\", Cursor]\n  | [\"trimpath\", Snek, number]\n  | [\"eatpellet\", ConcreteMediator]\n  | [\"hitself\", ConcreteMediator]\n  | [\"hitwall\", ConcreteMediator]\n  | [\"tooslow\", SpeedSnek];\n\ninterface Mediator {\n  notify(notification: Notification): void;\n}\n\n// events are sent here, and the mediator passes them on to the correct handler.\nexport class ConcreteMediator implements Mediator {\n  public speedSnek: SpeedSnek;\n  private cursor: Cursor;\n  private snek: Snek;\n  private pellet: Pellet;\n\n  constructor(\n    speedSnek: SpeedSnek,\n    cursor: Cursor,\n    snek: Snek,\n    pellet: Pellet\n  ) {\n    this.speedSnek = speedSnek;\n    this.speedSnek.setMediator(this);\n    this.cursor = cursor;\n    this.cursor.setMediator(this);\n    this.snek = snek;\n    this.snek.setMediator(this);\n    this.pellet = pellet;\n    this.pellet.setMediator(this);\n  }\n\n  public notify(notification: Notification): void {\n    const [event, sender, ...args] = notification;\n\n    switch (event) {\n      case \"pointermove\":\n        this.snek.update(sender);\n        this.checkCollision();\n        this.speedSnek.updateSpeed(sender);\n        break;\n\n      case \"trimpath\":\n        const [, , ix] = notification;\n        this.cursor.trim(ix);\n        break;\n\n      case \"eatpellet\":\n        console.log(\"nom!\");\n        this.snek.grow();\n        this.speedSnek.update();\n        this.pellet.place(this.snek.path);\n        break;\n\n      case \"hitself\":\n        console.log(\"ouch!\");\n        this.speedSnek.gameOver(event);\n        break;\n\n      case \"hitwall\":\n        console.log(\"whoops!\");\n        this.speedSnek.gameOver(event);\n        break;\n\n      case \"tooslow\":\n        console.log(\"faster!\");\n        this.speedSnek.gameOver(event);\n        break;\n\n      default:\n        const _exhaustiveCheck: never = sender;\n        return _exhaustiveCheck;\n    }\n  }\n\n  checkCollision() {\n    const snekHead = this.snek.path[0];\n\n    // snek vs pellet collisions\n    if (\n      2 <= this.cursor.path.length &&\n      intersection([this.cursor.path[0], this.cursor.path[1]], {\n        center: this.pellet.loc,\n        radius: this.pellet.r + this.snek.snekWidth / 2,\n      })\n    ) {\n      this.notify([\"eatpellet\", this]);\n    }\n\n    // // snek vs wall collisions\n    if (\n      snekHead.x - 1 <= 0 ||\n      this.cursor.target.width - 1 <= snekHead.x ||\n      snekHead.y - 1 <= 0 ||\n      this.cursor.target.height - 1 <= snekHead.y\n    ) {\n      this.notify([\"hitwall\", this]);\n    }\n\n    // snek vs snek collisions\n    for (let i = 2; i < this.snek.path.length - 1; i++) {\n      if (\n        intersection(\n          [this.snek.path[0], this.snek.path[1]],\n          [this.snek.path[i], this.snek.path[i + 1]]\n        )\n      ) {\n        this.notify([\"hitself\", this]);\n      }\n    }\n  }\n}\n\n// Components contain some sort of logic and can reference their mediators\n// Things in the game that have data that need updating.\nabstract class Component {\n  protected mediator: Mediator;\n\n  constructor(mediator?: Mediator) {\n    this.mediator = mediator!;\n  }\n\n  public setMediator(mediator: Mediator): void {\n    this.mediator = mediator;\n  }\n}\n\nexport class SpeedSnek extends Component {\n  score: number;\n  speedLimit: number;\n  maxSpeed: number;\n  speed: number;\n  smoothSpeed: number;\n\n  constructor(score = 0, speedLimit = 0, maxSpeed = 10) {\n    super();\n\n    this.score = score;\n    this.speedLimit = speedLimit;\n    this.maxSpeed = maxSpeed;\n    this.speed = speedLimit;\n    this.smoothSpeed = speedLimit;\n  }\n\n  update() {\n    this.score += 1;\n    this.speedLimit += 0.1;\n  }\n\n  updateSpeed(cursor: Cursor) {\n    const alpha = 0.1;\n    this.speed = cursor.getSpeed();\n    if (this.speed !== NaN) {\n      this.smoothSpeed = alpha * this.speed + (1 - alpha) * this.smoothSpeed;\n    }\n\n    if (this.smoothSpeed < this.speedLimit) {\n      this.mediator.notify([\"tooslow\", this]);\n    }\n  }\n\n  gameOver(reason: Notification[0]) {\n    const message = {\n      hitself: \"You crashed into yourself!\",\n      hitwall: \"You crashed into a wall!\",\n      tooslow: \"You were too slow!\",\n    };\n\n    if (process.env.NODE_ENV === \"production\") {\n      alert(`Game Over!\\n${message[reason]}\\nYour score: ${this.score}`);\n      location.reload();\n    }\n  }\n}\n\nexport class Cursor extends Component {\n  path: Path;\n  timeStamp: number[];\n  target: HTMLCanvasElement;\n\n  constructor(target: HTMLCanvasElement) {\n    super();\n    this.path = [];\n    this.timeStamp = [];\n    this.target = target;\n    this.moveHandler = this.moveHandler.bind(this);\n  }\n\n  public moveHandler(e: PointerEvent) {\n    const point = {\n      x: e.x - this.target.offsetLeft,\n      y: e.y - this.target.offsetTop,\n    };\n\n    this.path.unshift(point);\n    this.timeStamp.unshift(e.timeStamp);\n    this.mediator.notify([\"pointermove\", this]);\n  }\n\n  public trim(ix: number) {\n    this.path.splice(ix);\n    this.timeStamp.splice(ix);\n  }\n\n  public getSpeed(window = 6) {\n    window = Math.min(window, this.path.length - 1);\n    if (window < 2) {\n      return 0;\n    }\n\n    let travelled = 0;\n    let time = 0;\n    for (let i = 0; i < window; i++) {\n      travelled += dist(this.path[i], this.path[i + 1]);\n      time += this.timeStamp[i] - this.timeStamp[i + 1];\n    }\n\n    return travelled / time;\n  }\n}\n\nexport class Snek extends Component {\n  segments: number;\n  segLength: number;\n  path: Path;\n  snekWidth: number;\n\n  constructor(startLoc: Point, segments = 4, segLength = 50, snekWidth = 10) {\n    super();\n\n    this.path = [startLoc];\n    for (let i = 0; i < segments; i++) {\n      const nextSeg = {\n        x: this.path[i].x,\n        y: this.path[i].y + segLength,\n      };\n\n      this.path.push(nextSeg);\n    }\n\n    this.segments = segments;\n    this.segLength = segLength;\n    this.snekWidth = snekWidth;\n  }\n\n  public update(cursor: Cursor) {\n    const cursorPath = cursor.path;\n    this.path = [cursorPath[0]];\n    let segHead = this.path[this.path.length - 1];\n    for (let [ix, p] of cursorPath.entries()) {\n      if (this.path.length <= this.segments) {\n        while (this.segLength < dist(segHead, p)) {\n          const seg = [cursorPath[ix - 1], p];\n          const arc = {\n            center: segHead,\n            radius: this.segLength,\n          };\n          segHead = intersection(seg, arc) as Point;\n          this.path.push(segHead);\n          if (this.segments < this.path.length) {\n            break;\n          }\n        }\n      } else {\n        if (this.segLength * 2 <= dist(segHead, p)) {\n          this.mediator.notify([\"trimpath\", this, ix]);\n          break;\n        }\n      }\n    }\n  }\n\n  public grow() {\n    this.segments += 1;\n  }\n}\n\nexport class Pellet extends Component {\n  target: HTMLCanvasElement;\n  loc: Point;\n  r: number;\n\n  constructor(target: HTMLCanvasElement, noGo: Path, r = 8) {\n    super();\n\n    this.r = r;\n    this.target = target;\n    this.place(noGo);\n  }\n\n  // Choose random points within bb (bounding box) until no walls or snek\n  place(noGo: Path, buffer = 30) {\n    if (noGo !== undefined) {\n      noGo = noGo;\n    }\n\n    let loc: Point;\n    let locValid: boolean;\n\n    while (true) {\n      locValid = true;\n      loc = {\n        x: randomBetween(buffer, this.target.width - buffer),\n        y: randomBetween(buffer, this.target.height - buffer),\n      };\n\n      // Place is fine if there is no noGo\n      if (noGo.length === 0) {\n        this.loc = loc;\n        break;\n      }\n\n      // Check if pellet location within buffer distance of noGo path.\n      for (let i = 0; i < noGo.length - 1; i++) {\n        if (\n          intersection([noGo[i], noGo[i + 1]], {\n            center: loc,\n            radius: this.r + buffer,\n          })\n        ) {\n          // loc is too close to noGo, try again.\n          locValid = false;\n          break;\n        }\n      }\n\n      if (locValid) {\n        this.loc = loc;\n        break;\n      }\n    }\n  }\n}\n","import {\n  Composite,\n  CursorGraphics,\n  PelletGraphics,\n  SnekGraphics,\n  UiGraphics,\n} from \"./graphics\";\nimport { ConcreteMediator, Cursor, Snek, Pellet, SpeedSnek } from \"./model\";\n\nconst gameCanvas = document.getElementById(\"game\") as HTMLCanvasElement;\nconst gameContext = gameCanvas.getContext(\"2d\") as CanvasRenderingContext2D;\nconst uiCanvas = document.getElementById(\"ui\") as HTMLCanvasElement;\nconst uiContext = uiCanvas.getContext(\"2d\") as CanvasRenderingContext2D;\n\nconst cursor = new Cursor(gameCanvas);\nconst snek = new Snek({\n  x: gameCanvas.width / 2,\n  y: gameCanvas.height / 2,\n});\nconst pellet = new Pellet(gameCanvas, snek.path);\nconst speedSnek = new SpeedSnek();\nconst mediator = new ConcreteMediator(speedSnek, cursor, snek, pellet);\n\nconst gameGraphics = new Composite();\ngameGraphics.add(new CursorGraphics(cursor, gameContext));\ngameGraphics.add(new SnekGraphics(snek, gameContext));\ngameGraphics.add(new PelletGraphics(pellet, gameContext));\n\nconst uiGraphics = new Composite();\nuiGraphics.add(new UiGraphics(speedSnek, uiContext));\n\nconst graphics = new Composite();\ngraphics.add(gameGraphics);\ngraphics.add(uiGraphics);\n\ndocument.addEventListener(\"pointermove\", cursor.moveHandler);\n\nfunction draw() {\n  gameContext.clearRect(0, 0, gameCanvas.width, gameCanvas.height);\n  uiContext.clearRect(0, 0, uiCanvas.width, uiCanvas.height);\n\n  graphics.draw();\n  requestAnimationFrame(draw);\n}\ndraw();\n"],"names":["$11f96767ac22f166$var$Component","setParent","parent","this","getParent","$11f96767ac22f166$export$43586241d9db0c6d","children","add","component","push","remove","ix","indexOf","splice","draw","child","$11f96767ac22f166$var$GraphicsComponent","constructor","data","context","super","$512903f9dc58181d$export$6c4a311cc157c764","p1","p2","Math","sqrt","x","y","$512903f9dc58181d$export$bc86dfbf7795668c","seg1","seg2","x1","y1","x2","y2","center","xc","yc","radius","a","b","discriminant","t","x11","y11","x21","y21","x3","y3","x4","y4","t1","u","$de1c67ad03edf268$var$randomBetween","min","max","random","$de1c67ad03edf268$var$Component","mediator","setMediator","$1ccc8d3c866b7484$var$gameCanvas","document","getElementById","$1ccc8d3c866b7484$var$gameContext","getContext","$1ccc8d3c866b7484$var$uiCanvas","$1ccc8d3c866b7484$var$uiContext","$1ccc8d3c866b7484$var$cursor","target","path","timeStamp","moveHandler","bind","e","point","offsetLeft","offsetTop","unshift","notify","trim","getSpeed","window","length","travelled","time","i","$1ccc8d3c866b7484$var$snek","startLoc","segments","segLength","snekWidth","nextSeg","update","cursor","cursorPath","segHead","p","entries","grow","width","height","$1ccc8d3c866b7484$var$pellet","noGo","r","place","buffer","loc","locValid","$1ccc8d3c866b7484$var$speedSnek","score","speedLimit","maxSpeed","speed","smoothSpeed","updateSpeed","gameOver","reason","alert","hitself","hitwall","tooslow","location","reload","$1ccc8d3c866b7484$var$gameGraphics","speedSnek","snek","pellet","notification","event","sender","args","checkCollision","console","log","snekHead","strokeStyle","lineWidth","beginPath","moveTo","forEach","lineTo","stroke","lineCap","lineJoin","fillStyle","arc","PI","fill","$1ccc8d3c866b7484$var$uiGraphics","needleLoc","scaleX","value","canvas","$1ccc8d3c866b7484$var$graphics","addEventListener","$1ccc8d3c866b7484$var$draw","clearRect","requestAnimationFrame"],"version":3,"file":"index.8efde2dd.js.map"}